[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The Evergreen State College | Olympia WA | Bachelor of Science | Sept 2018 - June 2022"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "",
    "text": "The Evergreen State College | Olympia WA | Bachelor of Science | Sept 2018 - June 2022"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html",
    "href": "posts/Top100YABooks/Top100YABooks.html",
    "title": "The Top 100 Young Adult Books",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html#set-up",
    "href": "posts/Top100YABooks/Top100YABooks.html#set-up",
    "title": "The Top 100 Young Adult Books",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html#the-graphs",
    "href": "posts/Top100YABooks/Top100YABooks.html#the-graphs",
    "title": "The Top 100 Young Adult Books",
    "section": "The Graphs",
    "text": "The Graphs\nAn overview of the length of these books. A Histogram.\n\n\nCode\n#Book length (number of pages)\nfig &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, fill=\"blue\")\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Pages for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"beige\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n\n\n\n\nSeries vs Non-Series. A bar plot… maybe?\nI would like to figure out how to make this with two bars, one for series and one for stand-alones. Or I would like to change the labels on the bars.\n\n\nCode\n#Series vs non-series\n#BOOKS$series_Q &lt;- ifelse(is.na(BOOKS$series), \"Stand Alone\", \"Series\") \n\nfig &lt;- ggplot(BOOKS, aes(x = numberOfSeries))+ geom_bar(position = \"dodge\", color = \"navy\", fill = \"blue\")\n\n#Style\nfig_label &lt;- labs(title = \"Books in Series Vs. Stand Alones\")\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_label + fig_theme\n\nprint(fig)\n\n\n\n\n\nNumber of Books per Genre. An exploration of complex data tables. (In progress…)\nHow Popular of these books?\nA histogram of the number of books with a certain rating and a scatter plot of ratings vs. number of ratings.\n\n\nCode\n#Number of Ratings\nsuppressWarnings({\nfig &lt;- ggplot(BOOKS, aes(x = numRatings))+ geom_histogram(binwidth = 50000)\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n})\n\n\n\n\n\n\n\nCode\n#Number of Ratings vs. Rating\nsuppressWarnings({\nfig &lt;- ggplot(BOOKS, aes(x = numRatings, y = rating))+ geom_point()\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n})\n\n\n\n\n\nMultiple Authors? Yes? No? (do I even want to try to make this?)\nSetting? An exploration of searching.\nBook Format\n\n\nCode\nfig &lt;- ggplot(BOOKS, aes(x = bookFormat))+ geom_bar(position = \"dodge\", color = \"red\", fill = \"pink\")\n\n#Style\nfig_label &lt;- labs(title = \"Books format: a completly useless graph\")\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_label + fig_theme\n\nprint(fig)\n\n\n\n\n\nBook Format: series vs non series\nPages by genre\nPublisher?\nGenre by Publisher\nYear published\nif year published =/= year first published color (look up how to do this) for popout\n\n\nCode\n#Number of Ratings\nfig &lt;- ggplot(BOOKS, aes(x = publishedYear))+ geom_histogram(binwidth = 1)\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n\n\n\n\nRating Per Year\n\n\nCode\n#Number of Ratings vs. Rating\nsuppressWarnings({\n\nfig &lt;- ggplot(BOOKS, aes(x = publishedYear, y = numRatings))+ geom_point()\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n})\n\n\n\n\n\nFirst year published vs year published"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Notes",
    "section": "",
    "text": "A place to keep interesting or useful things."
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html",
    "href": "posts/midterm assignment/Midterm.html",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "",
    "text": "This post compares the University of Idaho grant awards from the department of agriculture (USDA), the department of energy (DOE), the national institute of health (NIH), and the national science foundation (NSF) to other similar universities."
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html#question-2",
    "href": "posts/midterm assignment/Midterm.html#question-2",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Question 2",
    "text": "Question 2\nWhat is the proportional representation of new awards to the UI from these various sources over the past 5 to 10 years? Are there any trends that are encouraging or discouraging?\n\n\nCode\n#Trends over time\n\n# a graph showing the number of new awards from each source (or just awards in the case of USDA) vs time, with a different line for each source.\n# a graph showing the amount of money per new awards vs. time for each source.\n\n\n#Question_2_1 &lt;- \n#ggplot"
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html#comparing-the-schools",
    "href": "posts/midterm assignment/Midterm.html#comparing-the-schools",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Comparing the Schools",
    "text": "Comparing the Schools\n\n\nCode\n# a graph showing a comparison of awards (or award money) given to each school by source. so a clump showing the number of awards (or amount of money) from for example from the NSF for each school then another clump for NIH, etc. Color coded by school for visibility across clumps. Note: active awards only. For the USDA awards use date = 2024\n\n\n# need to organize data\n\n\n\nQ3_1_1 &lt;- combined_data %&gt;%\n  group_by(Institution)\n\nggplot(Q3_1_1, aes(fill=Institution, y='Award Amount', x=Source)) + \n    geom_bar(position=\"dodge\", stat=\"identity\")\n\n\n\n\n\n\n\nCode\n#comparing the schools to each other\n\n# a graph comparing trends for each school (are any downturns coming for all the schools?). color coded and shape coded to clump schools, and sources. Colors for schools, shapes for sources, e.g. solid lines for NSF, rect dash for NIH, triangles dash for DOE, dots dash for USDA."
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html",
    "href": "posts/assignment 2/assignment 2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "This Data is “Best Books (10k) Multi-Genre Data” data set from Kaggle. It’s from the “Books That Everyone Should Read At Least Once” list on Goodreads.\nTitle of Book: The Label for the data.\nAuthor: A category.\nA Description of the Book.\nGenres: Categories that I want to analyze.\nAverage Rating: Quantitative.\nNumber of Ratings: Quantitative.\nURL:\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_data.csv\")\nhead(BOOKS)\n\n\n  X                                                        Book\n1 0                                       To Kill a Mockingbird\n2 1 Harry Potter and the Philosopher’s Stone (Harry Potter, #1)\n3 2                                         Pride and Prejudice\n4 3                                   The Diary of a Young Girl\n5 4                                                 Animal Farm\n6 5                                           The Little Prince\n                    Author\n1               Harper Lee\n2             J.K. Rowling\n3              Jane Austen\n4               Anne Frank\n5            George Orwell\n6 Antoine de Saint-Exupéry\nescription\n1                                                                                                                                                                                                                                The unforgettable novel of a childhood in a sleepy Southern town and the crisis of conscience that rocked it. \"To Kill A Mockingbird\" became both an instant bestseller and a critical success when it was first published in 1960. It went on to win the Pulitzer Prize in 1961 and was later made into an Academy Award-winning film, also a classic.Compassionate, dramatic, and deeply moving, \"To Kill A Mockingbird\" takes readers to the roots of human behavior - to innocence and experience, kindness and cruelty, love and hatred, humor and pathos. Now with over 18 million copies in print and translated into forty languages, this regional story by a young Alabama woman claims universal appeal. Harper Lee always considered her book to be a simple love story. Today it is regarded as a masterpiece of American literature.\narry Potter thinks he is an ordinary boy - until he is rescued by an owl, taken to Hogwarts School of Witchcraft and Wizardry, learns to play Quidditch and does battle in a deadly duel. The Reason ... HARRY POTTER IS A WIZARD!\n3                                                                                                                                                                                                                                                                                                                                                                                                          Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \"her own darling child\" and its vivacious heroine, Elizabeth Bennet, \"as delightful a creature as ever appeared in print.\" The romantic clash between the opinionated Elizabeth and her proud beau, Mr. Darcy, is a splendid performance of civilized sparring. And Jane Austen's radiant wit sparkles as her characters dance a delicate quadrille of flirtation and intrigue, making this book the most superb comedy of manners of Regency England.Alternate cover edition of ISBN 9780679783268\n4 Discovered in the attic in which she spent the last years of her life, Anne Frank’s remarkable diary has become a world classic—a powerful reminder of the horrors of war and an eloquent testament to the human spirit. In 1942, with the Nazis occupying Holland, a thirteen-year-old Jewish girl and her family fled their home in Amsterdam and went into hiding. For the next two years, until their whereabouts were betrayed to the Gestapo, the Franks and another family lived cloistered in the “Secret Annexe” of an old office building. Cut off from the outside world, they faced hunger, boredom, the constant cruelties of living in confined quarters, and the ever-present threat of discovery and death. In her diary Anne Frank recorded vivid impressions of her experiences during this period. By turns thoughtful, moving, and surprisingly humorous, her account offers a fascinating commentary on human courage and frailty and a compelling self-portrait of a sensitive and spirited young woman whose promise was tragically cut short.--back cover\n5                                                                                                                                                                                                                                                                      Librarian's note: There is an Alternate Cover Edition for this edition of this book here.A farm is taken over by its overworked, mistreated animals. With flaming idealism and stirring slogans, they set out to create a paradise of progress, justice, and equality. Thus the stage is set for one of the most telling satiric fables ever penned –a razor-edged fairy tale for grown-ups that records the evolution from revolution against tyranny to a totalitarianism just as terrible. When Animal Farm was first published, Stalinist Russia was seen as its target. Today it is devastatingly clear that wherever and whenever freedom is attacked, under whatever banner, the cutting clarity and savage comedy of George Orwell’s masterpiece have a meaning and message still ferociously fresh.\n6                                                                                                                                                                                                                                                                         A pilot stranded in the desert awakes one morning to see, standing before him, the most extraordinary little fellow. \"Please,\" asks the stranger, \"draw me a sheep.\" And the pilot realizes that when life's events are too difficult to understand, there is no choice but to succumb to their mysteries. He pulls out pencil and paper... And thus begins this wise and enchanting fable that, in teaching the secret of what is really important in life, has changed forever the world for its readers.Few stories are as widely read and as universally cherished by children and adults alike as The Little Prince, presented here in a stunning new translation with carefully restored artwork. The definitive edition of a worldwide classic, it will capture the hearts of readers of all ages.\n                                                                                              Genres\n1 ['Classics', 'Fiction', 'Historical Fiction', 'School', 'Literature', 'Young Adult', 'Historical']\n2            ['Fantasy', 'Fiction', 'Young Adult', 'Magic', 'Childrens', 'Middle Grade', 'Classics']\n3  ['Classics', 'Fiction', 'Romance', 'Historical Fiction', 'Literature', 'Historical', 'Audiobook']\n4            ['Classics', 'Nonfiction', 'History', 'Biography', 'Memoir', 'Historical', 'Holocaust']\n5                 ['Classics', 'Fiction', 'Dystopia', 'Fantasy', 'Politics', 'School', 'Literature']\n6             ['Classics', 'Fiction', 'Fantasy', 'Childrens', 'France', 'Philosophy', 'Young Adult']\n  Avg_Rating Num_Ratings\n1       4.27   5,691,311\n2       4.47   9,278,135\n3       4.28   3,944,155\n4       4.18   3,488,438\n5       3.98   3,575,172\n6       4.32   1,924,063\n                                                                                 URL\n1                     https://www.goodreads.com/book/show/2657.To_Kill_a_Mockingbird\n2 https://www.goodreads.com/book/show/72193.Harry_Potter_and_the_Philosopher_s_Stone\n3                       https://www.goodreads.com/book/show/1885.Pride_and_Prejudice\n4                https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl\n5                             https://www.goodreads.com/book/show/170448.Animal_Farm\n6                       https://www.goodreads.com/book/show/157993.The_Little_Prince\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_histogram(binwidth = 0.01)\n\n\n\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_density()"
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html#description-of-data",
    "href": "posts/assignment 2/assignment 2.html#description-of-data",
    "title": "Assignment 2",
    "section": "",
    "text": "This Data is “Best Books (10k) Multi-Genre Data” data set from Kaggle. It’s from the “Books That Everyone Should Read At Least Once” list on Goodreads.\nTitle of Book: The Label for the data.\nAuthor: A category.\nA Description of the Book.\nGenres: Categories that I want to analyze.\nAverage Rating: Quantitative.\nNumber of Ratings: Quantitative.\nURL:"
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html#the-data",
    "href": "posts/assignment 2/assignment 2.html#the-data",
    "title": "Assignment 2",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_data.csv\")\nhead(BOOKS)\n\n\n  X                                                        Book\n1 0                                       To Kill a Mockingbird\n2 1 Harry Potter and the Philosopher’s Stone (Harry Potter, #1)\n3 2                                         Pride and Prejudice\n4 3                                   The Diary of a Young Girl\n5 4                                                 Animal Farm\n6 5                                           The Little Prince\n                    Author\n1               Harper Lee\n2             J.K. Rowling\n3              Jane Austen\n4               Anne Frank\n5            George Orwell\n6 Antoine de Saint-Exupéry\nescription\n1                                                                                                                                                                                                                                The unforgettable novel of a childhood in a sleepy Southern town and the crisis of conscience that rocked it. \"To Kill A Mockingbird\" became both an instant bestseller and a critical success when it was first published in 1960. It went on to win the Pulitzer Prize in 1961 and was later made into an Academy Award-winning film, also a classic.Compassionate, dramatic, and deeply moving, \"To Kill A Mockingbird\" takes readers to the roots of human behavior - to innocence and experience, kindness and cruelty, love and hatred, humor and pathos. Now with over 18 million copies in print and translated into forty languages, this regional story by a young Alabama woman claims universal appeal. Harper Lee always considered her book to be a simple love story. Today it is regarded as a masterpiece of American literature.\narry Potter thinks he is an ordinary boy - until he is rescued by an owl, taken to Hogwarts School of Witchcraft and Wizardry, learns to play Quidditch and does battle in a deadly duel. The Reason ... HARRY POTTER IS A WIZARD!\n3                                                                                                                                                                                                                                                                                                                                                                                                          Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \"her own darling child\" and its vivacious heroine, Elizabeth Bennet, \"as delightful a creature as ever appeared in print.\" The romantic clash between the opinionated Elizabeth and her proud beau, Mr. Darcy, is a splendid performance of civilized sparring. And Jane Austen's radiant wit sparkles as her characters dance a delicate quadrille of flirtation and intrigue, making this book the most superb comedy of manners of Regency England.Alternate cover edition of ISBN 9780679783268\n4 Discovered in the attic in which she spent the last years of her life, Anne Frank’s remarkable diary has become a world classic—a powerful reminder of the horrors of war and an eloquent testament to the human spirit. In 1942, with the Nazis occupying Holland, a thirteen-year-old Jewish girl and her family fled their home in Amsterdam and went into hiding. For the next two years, until their whereabouts were betrayed to the Gestapo, the Franks and another family lived cloistered in the “Secret Annexe” of an old office building. Cut off from the outside world, they faced hunger, boredom, the constant cruelties of living in confined quarters, and the ever-present threat of discovery and death. In her diary Anne Frank recorded vivid impressions of her experiences during this period. By turns thoughtful, moving, and surprisingly humorous, her account offers a fascinating commentary on human courage and frailty and a compelling self-portrait of a sensitive and spirited young woman whose promise was tragically cut short.--back cover\n5                                                                                                                                                                                                                                                                      Librarian's note: There is an Alternate Cover Edition for this edition of this book here.A farm is taken over by its overworked, mistreated animals. With flaming idealism and stirring slogans, they set out to create a paradise of progress, justice, and equality. Thus the stage is set for one of the most telling satiric fables ever penned –a razor-edged fairy tale for grown-ups that records the evolution from revolution against tyranny to a totalitarianism just as terrible. When Animal Farm was first published, Stalinist Russia was seen as its target. Today it is devastatingly clear that wherever and whenever freedom is attacked, under whatever banner, the cutting clarity and savage comedy of George Orwell’s masterpiece have a meaning and message still ferociously fresh.\n6                                                                                                                                                                                                                                                                         A pilot stranded in the desert awakes one morning to see, standing before him, the most extraordinary little fellow. \"Please,\" asks the stranger, \"draw me a sheep.\" And the pilot realizes that when life's events are too difficult to understand, there is no choice but to succumb to their mysteries. He pulls out pencil and paper... And thus begins this wise and enchanting fable that, in teaching the secret of what is really important in life, has changed forever the world for its readers.Few stories are as widely read and as universally cherished by children and adults alike as The Little Prince, presented here in a stunning new translation with carefully restored artwork. The definitive edition of a worldwide classic, it will capture the hearts of readers of all ages.\n                                                                                              Genres\n1 ['Classics', 'Fiction', 'Historical Fiction', 'School', 'Literature', 'Young Adult', 'Historical']\n2            ['Fantasy', 'Fiction', 'Young Adult', 'Magic', 'Childrens', 'Middle Grade', 'Classics']\n3  ['Classics', 'Fiction', 'Romance', 'Historical Fiction', 'Literature', 'Historical', 'Audiobook']\n4            ['Classics', 'Nonfiction', 'History', 'Biography', 'Memoir', 'Historical', 'Holocaust']\n5                 ['Classics', 'Fiction', 'Dystopia', 'Fantasy', 'Politics', 'School', 'Literature']\n6             ['Classics', 'Fiction', 'Fantasy', 'Childrens', 'France', 'Philosophy', 'Young Adult']\n  Avg_Rating Num_Ratings\n1       4.27   5,691,311\n2       4.47   9,278,135\n3       4.28   3,944,155\n4       4.18   3,488,438\n5       3.98   3,575,172\n6       4.32   1,924,063\n                                                                                 URL\n1                     https://www.goodreads.com/book/show/2657.To_Kill_a_Mockingbird\n2 https://www.goodreads.com/book/show/72193.Harry_Potter_and_the_Philosopher_s_Stone\n3                       https://www.goodreads.com/book/show/1885.Pride_and_Prejudice\n4                https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl\n5                             https://www.goodreads.com/book/show/170448.Animal_Farm\n6                       https://www.goodreads.com/book/show/157993.The_Little_Prince\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_histogram(binwidth = 0.01)\n\n\n\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_density()"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html",
    "href": "posts/assignment 4/assignment 4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\nThe Data sets being used:\nTop 100 Young Adult Books\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")\n\n\n\n\nFigure 1\nFigure 2\n\n\n\n\n\nCode\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)\n\n\n\n\n\n\n\n\nFigure 5\nFigure 6\n\n\n\nFigure 7\nFigure 8"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#expressiveness-and-effectiveness",
    "href": "posts/assignment 4/assignment 4.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 1\nFigure 2"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#discriminability",
    "href": "posts/assignment 4/assignment 4.html#discriminability",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#separability",
    "href": "posts/assignment 4/assignment 4.html#separability",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 5\nFigure 6"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#popout",
    "href": "posts/assignment 4/assignment 4.html#popout",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 7\nFigure 8"
  },
  {
    "objectID": "posts/assignment_network data/index.html",
    "href": "posts/assignment_network data/index.html",
    "title": "Practice with Network Data",
    "section": "",
    "text": "In this assignment, we’ll consider some of the tools and techniques for visualizing network data. Network data is characterized by two unique items that are not found in tabular or spatial data - Nodes and Links. In addition, there is a sub-type of network data that we will consider - Hierarchical or Tree data. Let’s practice a few visualizations to get a feel for how these things work!"
  },
  {
    "objectID": "posts/assignment_network data/index.html#igraph",
    "href": "posts/assignment_network data/index.html#igraph",
    "title": "Practice with Network Data",
    "section": "IGRAPH",
    "text": "IGRAPH\nLet’s start with igraph, which is an open source toolset for network analysis. The great thing about igraph is that you can use these tools in R, Python, Mathematica, and C++. It is very flexible and very powerful.\n\nigraph in R\nFirst up, we’ll install R/igraph and load the library (note that I’ve commented out the package installation because I’ve already installed igraph on my machine):\n\n\nCode\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nNow I’m going to walk you through a modified version of the igraph tutorial, which you can find here"
  },
  {
    "objectID": "posts/assignment_network data/index.html#creating-a-graph",
    "href": "posts/assignment_network data/index.html#creating-a-graph",
    "title": "Practice with Network Data",
    "section": "Creating a graph",
    "text": "Creating a graph\nigraph offers many ways to create a graph. The simplest one is the function make_empty_graph:\n\n\nCode\ng &lt;- make_empty_graph()\n\n\nThe most common way to create a graph is make_graph, which constructs a network based on specified edges. For example, to make a graph with 10 nodes (numbered 1 to 10) and two edges connecting nodes 1-2 and 1-5:\n\n\nCode\ng &lt;- make_graph(edges = c(1,2, 1,5), n=10, directed = FALSE)\n\n\nWe can print the graph to get a summary of its nodes and edges:\n\n\nCode\ng\n\n\nIGRAPH a249cea U--- 10 2 -- \n+ edges from a249cea:\n[1] 1--2 1--5\n\n\nThis means: Undirected Named graph with 10 vertices and 2 edges, with the exact edges listed out. If the graph has a [name] attribute, it is printed as well.\n\n\n\n\n\n\nNote\n\n\n\nsummary does not list the edges, which is convenient for large graphs with millions of edges:\n\n\n\n\nCode\nsummary(g)\n\n\nIGRAPH a249cea U--- 10 2 -- \n\n\nThe same function make_graph can create some notable graphs by just specifying their name. For example you can create the graph that represents the social network of Zachary’s karate club, that shows the friendship between 34 members of a karate club at a US university in the 1970s:\n\n\nCode\ng &lt;- make_graph('Zachary')\n\n\nTo visualize a graph you can use plot:\n\n\nCode\nplot(g)"
  },
  {
    "objectID": "posts/assignment_network data/index.html#vertex-and-edge-ids",
    "href": "posts/assignment_network data/index.html#vertex-and-edge-ids",
    "title": "Practice with Network Data",
    "section": "Vertex and edge IDs",
    "text": "Vertex and edge IDs\nVertices and edges have numerical vertex IDs in igraph. Vertex IDs are always consecutive and they start with 1. For a graph with n vertices the vertex IDs are always between 1 and n. If some operation changes the number of vertices in the graphs, e.g. a subgraph is created via induced_subgraph, then the vertices are renumbered to satisfy this criterion.\nThe same is true for the edges as well: edge IDs are always between 1 and m, the total number of edges in the graph.\nIn addition to IDs, vertices and edges can be assigned a name and other attributes. That makes it easier to track them whenever the graph is altered."
  },
  {
    "objectID": "posts/assignment_network data/index.html#addingdeleting-vertices-and-edges",
    "href": "posts/assignment_network data/index.html#addingdeleting-vertices-and-edges",
    "title": "Practice with Network Data",
    "section": "Adding/deleting vertices and edges",
    "text": "Adding/deleting vertices and edges\nLet’s continue working with the Karate club graph. To add one or more vertices to an existing graph, use add_vertices:\n\n\nCode\ng &lt;- add_vertices(g, 3)\n\n\nSimilarly, to add edges you can use add_edges:\n\n\nCode\ng &lt;- add_edges(g, edges = c(1,35, 1,36, 34,37))\n\n\nEdges are added by specifying the source and target vertex IDs for each edge. This call added three edges, one connecting vertices 1 and 35, one connecting vertices 1 and 36, and one connecting vertices 34 and 37.\nIn addition to the add_vertices and add_edges functions, the plus operator can be used to add vertices or edges to graph. The actual operation that is performed depends on the type of the right hand side argument:\n\n\nCode\ng &lt;- g + edges(c(1,35, 1,36, 34,37))\n\n\nYou can add a single vertex/edge at a time using add_vertex and add_edge.\nLet us add some more vertices and edges to our graph. In igraph we can use the magrittr package, which provides a mechanism for chaining commands with the operator %\\&gt;%:\n\n\nCode\ng &lt;- g %&gt;% add_edges(edges=c(1,34)) %&gt;% add_vertices(3) %&gt;%\n     add_edges(edges=c(38,39, 39,40, 40,38, 40,37))\ng\n\n\nIGRAPH 0a4743f U--- 40 86 -- Zachary\n+ attr: name (g/c)\n+ edges from 0a4743f:\n [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  1-- 7  1-- 8  1-- 9  1--11  1--12\n[11]  1--13  1--14  1--18  1--20  1--22  1--32  2-- 3  2-- 4  2-- 8  2--14\n[21]  2--18  2--20  2--22  2--31  3-- 4  3-- 8  3--28  3--29  3--33  3--10\n[31]  3-- 9  3--14  4-- 8  4--13  4--14  5-- 7  5--11  6-- 7  6--11  6--17\n[41]  7--17  9--31  9--33  9--34 10--34 14--34 15--33 15--34 16--33 16--34\n[51] 19--33 19--34 20--34 21--33 21--34 23--33 23--34 24--26 24--28 24--33\n[61] 24--34 24--30 25--26 25--28 25--32 26--32 27--30 27--34 28--34 29--32\n[71] 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34  1--35  1--36\n+ ... omitted several edges\n\n\nCode\nplot(g)\n\n\n\n\n\nWe now have an undirected graph with 40 vertices and 86 edges. Vertex and edge IDs are always contiguous, so if you delete a vertex all subsequent vertices will be renumbered. When a vertex is renumbered, edges are not renumbered, but their source and target vertices will be. Use delete_vertices and delete_edges to perform these operations. For instance, to delete the edge connecting vertices 1-34, get its ID and then delete it:\n\n\nCode\nget.edge.ids(g, c(1,34))\n\n\n[1] 82\n\n\n\n\nCode\ng &lt;- delete_edges(g, 82)\n\n\nAs an example, to create a broken ring:\n\n\nCode\ng &lt;- make_ring(10) %&gt;% delete_edges(\"10|1\")\nplot(g)\n\n\n\n\n\nThe example above shows that you can also refer to edges with strings containing the IDs of the source and target vertices, connected by a pipe symbol |. \"10|1\" in the above example means the edge that connects vertex 10 to vertex 1. Of course you can also use the edge IDs directly, or retrieve them with the get.edge.ids function:\n\n\nCode\ng &lt;- make_ring(5)\ng &lt;- delete_edges(g, get.edge.ids(g, c(1,5, 4,5)))\nplot(g)"
  },
  {
    "objectID": "posts/assignment_network data/index.html#constructing-graphs",
    "href": "posts/assignment_network data/index.html#constructing-graphs",
    "title": "Practice with Network Data",
    "section": "Constructing graphs",
    "text": "Constructing graphs\nIn addition to make_empty_graph, make_graph, and make_graph_from_literal, igraph includes many other function to construct a graph. Some are deterministic, i.e. they produce the same graph each single time, e.g. make_tree:\n\n\nCode\ngraph1 &lt;- make_tree(127, 2, mode = \"undirected\")\nsummary(graph1)\n\n\nIGRAPH 036b8b0 U--- 127 126 -- Tree\n+ attr: name (g/c), children (g/n), mode (g/c)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a regular tree graph with 127 vertices, each vertex having two children. No matter how many times you call make_tree, the generated graph will always be the same if you use the same parameters:\n\n\nCode\ngraph2 &lt;- make_tree(127, 2, mode = \"undirected\")\n\n\n\n\nCode\nidentical_graphs(graph1,graph2)\n\n\n[1] TRUE\n\n\nOther functions generate graphs stochastically, i.e. they produce a different graph each time. For instance sample_grg:\n\n\nCode\ngraph1 &lt;- sample_grg(100, 0.2)\nsummary(graph1)\n\n\nIGRAPH 938dc01 U--- 100 445 -- Geometric random graph\n+ attr: name (g/c), radius (g/n), torus (g/l)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a geometric random graph: n points are chosen randomly and uniformly inside the unit square and pairs of points closer to each other than a predefined distance d are connected by an edge. If you generate GRGs with the same parameters, they will be different:\n\n\nCode\ngraph2 &lt;- sample_grg(100, 0.2)\nidentical_graphs(graph1, graph2)\n\n\n[1] FALSE\n\n\nCode\nplot(graph2)\n\n\n\n\n\nA slightly looser way to check if the graphs are equivalent is via isomorphic. Two graphs are said to be isomorphic if they have the same number of components (vertices and edges) and maintain a one-to-one correspondence between vertices and edges, i.e., they are connected in the same way.\n\n\nCode\nisomorphic(graph1, graph2)\n\n\n[1] FALSE\n\n\nChecking for isomorphism can take a while for large graphs (in this case, the answer can quickly be given by checking the degree sequence of the two graphs). identical_graph is a stricter criterion than isomorphic: the two graphs must have the same list of vertices and edges, in exactly the same order, with same directedness, and the two graphs must also have identical graph, vertex and edge attributes."
  },
  {
    "objectID": "posts/assignment_network data/index.html#setting-and-retrieving-attributes",
    "href": "posts/assignment_network data/index.html#setting-and-retrieving-attributes",
    "title": "Practice with Network Data",
    "section": "Setting and retrieving attributes",
    "text": "Setting and retrieving attributes\nIn addition to IDs, vertex and edges can have attributes such as a name, coordinates for plotting, metadata, and weights. The graph itself can have such attributes too (e.g. a name, which will show in summary). In a sense, every graph, vertex and edge can be used as an R namespace to store and retrieve these attributes.\nTo demonstrate the use of attributes, let us create a simple social network:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther)\n\n\nEach vertex represents a person, so we want to store ages, genders and types of connection between two people (is_formal refers to whether a connection between one person or another is formal or informal, i.e. colleagues or friends). The \\$ operator is a shortcut to get and set graph attributes. It is shorter and just as readable as graph_attr and set_graph_attr.\n\n\nCode\nV(g)$age &lt;- c(25, 31, 18, 23, 47, 22, 50) \nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\nE(g)$is_formal &lt;- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)\nsummary(g)\n\n\nIGRAPH 2d5397d UN-- 7 9 -- \n+ attr: name (v/c), age (v/n), gender (v/c), is_formal (e/l)\n\n\nV and E are the standard way to obtain a sequence of all vertices and edges, respectively. This assigns an attribute to all vertices/edges at once. Another way to generate our social network is with the use of set_vertex_attr and set_edge_attr and the operator %\\&gt;%:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther) %&gt;%\n  set_vertex_attr(\"age\", value = c(25, 31, 18, 23, 47, 22, 50)) %&gt;%\n  set_vertex_attr(\"gender\", value = c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")) %&gt;%\n  set_edge_attr(\"is_formal\", value = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE))\nsummary(g)\n\n\nTo assign or modify an attribute for a single vertex/edge:\n\n\nCode\nE(g)$is_formal\n\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nCode\nE(g)$is_formal[1] &lt;- TRUE\nE(g)$is_formal\n\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nAttribute values can be set to any R object, but note that storing the graph in some file formats might result in the loss of complex attribute values. Vertices, edges and the graph itself can all be used to set attributes, e.g. to add a date to the graph:\n\n\nCode\ng$date &lt;- c(\"2022-02-11\")\ngraph_attr(g, \"date\")\n\n\n[1] \"2022-02-11\"\n\n\nTo retrieve attributes, you can also use graph_attr, vertex_attr, and edge_attr. To find the ID of a vertex you can use the function match:\n\n\nCode\nmatch(c(\"George\"), V(g)$name)\n\n\n[1] 7\n\n\nTo assign attributes to a subset of vertices or edges, you can use:\n\n\nCode\nV(g)$name[1:3] &lt;- c(\"Alejandra\", \"Bruno\", \"Carmina\")\nV(g)\n\n\n+ 7/7 vertices, named, from 2d5397d:\n[1] Alejandra Bruno     Carmina   Frank     Dennis    Esther    George   \n\n\nTo delete attributes:\n\n\nCode\ng &lt;- delete_vertex_attr(g, \"gender\")\nV(g)$gender\n\n\nNULL\n\n\nIf you want to save a graph in R with all the attributes use the R’s standard function dput function and retrieve it later with dget. You can also just save the R workspace and restore it later."
  },
  {
    "objectID": "posts/assignment_network data/index.html#structural-properties-of-graphs",
    "href": "posts/assignment_network data/index.html#structural-properties-of-graphs",
    "title": "Practice with Network Data",
    "section": "Structural properties of graphs",
    "text": "Structural properties of graphs\nigraph provides a large set of functions to calculate various structural properties of graphs. It is beyond the scope of this tutorial to document all of them, hence this section will only introduce a few of them for illustrative purposes. We will work on the small social network constructed in the previous section.\nPerhaps the simplest property one can think of is the degree. The degree of a vertex equals the number of edges adjacent to it. In case of directed networks, we can also define in-degree (the number of edges pointing towards the vertex) and out-degree (the number of edges originating from the vertex). igraph is able to calculate all of them using a simple syntax:\n\n\nCode\ndegree(g)\n\n\nAlejandra     Bruno   Carmina     Frank    Dennis    Esther    George \n        3         1         4         3         3         2         2 \n\n\nIf the graph was directed, we would have been able to calculate the in- and out-degrees separately using degree(mode=\"in\") and degree(mode=\"out\"). You can also pass a single vertex ID or a list of vertex IDs to degree if you want to calculate the degrees for only a subset of vertices:\n\n\nCode\ndegree(g, 7)\n\n\nGeorge \n     2 \n\n\n\n\nCode\ndegree(g, v=c(3,4,5))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nMost functions that accept vertex IDs also accept vertex names (i.e. the values of the name vertex attribute) as long as the names are unique:\n\n\nCode\ndegree(g, v=c(\"Carmina\", \"Frank\", \"Dennis\"))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nIt also works for single vertices:\n\n\nCode\ndegree(g, \"Bruno\")\n\n\nBruno \n    1 \n\n\nA similar syntax is used for most of the structural properties igraph can calculate. For vertex properties, the functions accept a vertex ID, a vertex name, or a list of vertex IDs or names (and if they are omitted, the default is the set of all vertices). For edge properties, the functions accept a single edge ID or a list of edge IDs.\n\nNOTE: For some measures, it does not make sense to calculate them only for a few vertices or edges instead of the whole graph, as it would take the same time anyway. In this case, the functions won’t accept vertex or edge IDs, but you can still restrict the resulting list later using standard operations. One such example is eigenvector centrality (evcent()).\n\nBesides degree, igraph includes built-in routines to calculate many other centrality properties, including vertex and edge betweenness (edge_betweenness) or Google’s PageRank (page_rank) just to name a few. Here we just illustrate edge betweenness:\n\n\nCode\nedge_betweenness(g)\n\n\n[1] 6 6 4 3 4 4 4 2 3\n\n\nNow we can also figure out which connections have the highest betweenness centrality:\n\n\nCode\nebs &lt;- edge_betweenness(g)\nas_edgelist(g)[ebs == max(ebs), ]\n\n\n     [,1]        [,2]     \n[1,] \"Alejandra\" \"Bruno\"  \n[2,] \"Alejandra\" \"Carmina\""
  },
  {
    "objectID": "posts/assignment_network data/index.html#querying-vertices-and-edges-based-on-attributes",
    "href": "posts/assignment_network data/index.html#querying-vertices-and-edges-based-on-attributes",
    "title": "Practice with Network Data",
    "section": "Querying vertices and edges based on attributes",
    "text": "Querying vertices and edges based on attributes\n\nSelecting vertices\nImagine that in a given social network, you want to find out who has the largest degree. You can do that with the tools presented so far and the which.max function:\n\n\nCode\nwhich.max(degree(g))\n\n\nCarmina \n      3 \n\n\nAnother example would be to select only vertices that have only odd IDs but not even ones, using the V function:\n\n\nCode\ngraph &lt;- graph.full(n=10)\nonly_odd_vertices &lt;- which(V(graph)%%2==1)\nlength(only_odd_vertices)\n\n\n[1] 5\n\n\nOf course, it is possible to select vertices or edges by positional indices:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7]\nseq\n\n\n+ 3/10 vertices, from a2165ca:\n[1] 2 3 7\n\n\n\n\nCode\nseq &lt;- seq[1, 3]    # filtering an existing vertex set\nseq\n\n\n+ 2/10 vertices, from a2165ca:\n[1] 2 7\n\n\nSelecting a vertex that does not exist results in an error:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7, \"foo\", 3.5]\n## Error in simple_vs_index(x, ii, na_ok) : Unknown vertex selected\n\n\nAttribute names can also be used as-is within the indexing brackets of V() and E(). This can be combined with R’s ability to use boolean vectors for indexing to obtain very concise and readable expressions to retrieve a subset of the vertex or edge set of a graph. For instance, the following command gives you the names of the individuals younger than 30 years in our social network:\n\n\nCode\nV(g)[age &lt; 30]$name\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Frank\"     \"Esther\"   \n\n\nOf course, &lt; is not the only boolean operator that can be used for this. Other possibilities include the following:\n\n\n\n\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nThe attribute/property value must be equal to\n\n\n!=\nThe attribute/property value must not be equal to\n\n\n&lt;\nThe attribute/property value must be less than\n\n\n&lt;=\nThe attribute/property value must be less than or equal to\n\n\n&gt;\nThe attribute/property value must be greater than\n\n\n&gt;=\nThe attribute/property value must be greater than or equal to\n\n\n%in%\nThe attribute/property value must be included in\n\n\n\nYou can also create a “not in” operator from %in% using the Negate function:\n\n\nCode\n`%notin%` &lt;- Negate(`%in%`)\n\n\nIf an attribute has the same name as an igraph function, you should be careful as the syntax can become a little confusing. For instance, if there is an attribute named degree that represents the grades of an exam for each person, that should not be confused with the igraph function that computes the degrees of vertices in a network sense:\n\n\nCode\nV(g)$degree &lt;- c(\"A\", \"B\", \"B+\", \"A+\", \"C\", \"A\", \"B\")\nV(g)$degree[degree(g) == 3]\n\n\n[1] \"A\"  \"A+\" \"C\" \n\n\n\n\nCode\nV(g)$name[degree(g) == 3]\n\n\n[1] \"Alejandra\" \"Frank\"     \"Dennis\"   \n\n\n\n\nSelecting edges\nEdges can be selected based on attributes just like vertices. As mentioned above, the standard way to get edges is E. Moreover, there are a few special structural properties for selecting edges.\nUsing .from allows you to filter the edge sequence based on the source vertices of the edges. E.g., to select all the edges originating from Carmina (who has vertex index 3):\n\n\nCode\nE(g)[.from(3)]\n\n\n+ 4/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nOf course it also works with vertex names:\n\n\nCode\nE(g)[.from(\"Carmina\")]\n\n\n+ 4/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nUsing .to filters edge sequences based on the target vertices. This is different from .from if the graph is directed, while it gives the same answer for undirected graphs. Using .inc selects only those edges that are incident on a single vertex or at least one of the vertices, irrespectively of the edge directions.\nThe %--% operator can be used to select edges between specific groups of vertices, ignoring edge directions in directed graphs. For instance, the following expression selects all the edges between Carmina (vertex index 3), Dennis (vertex index 5) and Esther (vertex index 6):\n\n\nCode\nE(g) [ 3:5 %--% 5:6 ]\n\n\n+ 3/9 edges from 2d5397d (vertex names):\n[1] Carmina--Dennis Carmina--Esther Dennis --Esther\n\n\nTo make the %--% operator work with names, you can build string vectors containing the names and then use these vectors as operands. For instance, to select all the edges that connect men to women, we can do the following after re-adding the gender attribute that we deleted earlier:\n\n\nCode\nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\n\n\n\n\nCode\nmen &lt;- V(g)[gender == \"m\"]$name\nmen\n\n\n[1] \"Bruno\"  \"Frank\"  \"Dennis\" \"George\"\n\n\n\n\nCode\nwomen &lt;- V(g)[gender == \"f\"]$name\nwomen\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Esther\"   \n\n\n\n\nCode\nE(g)[men %--% women]\n\n\n+ 5/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Bruno  Alejandra--Frank  Carmina  --Frank  Carmina  --Dennis\n[5] Dennis   --Esther"
  },
  {
    "objectID": "posts/assignment_network data/index.html#treating-a-graph-as-an-adjacency-matrix",
    "href": "posts/assignment_network data/index.html#treating-a-graph-as-an-adjacency-matrix",
    "title": "Practice with Network Data",
    "section": "Treating a graph as an adjacency matrix",
    "text": "Treating a graph as an adjacency matrix\nThe adjacency matrix is another way to represent a graph. In an adjacency matrix, rows and columns are labeled by graph vertices, and the elements of the matrix indicate the number of edges between vertices i and j. The adjacency matrix for the example graph is:\n\n\nCode\nget.adjacency(g)\n\n\nWarning: `get.adjacency()` was deprecated in igraph 2.0.0.\nℹ Please use `as_adjacency_matrix()` instead.\n\n\n7 x 7 sparse Matrix of class \"dgCMatrix\"\n          Alejandra Bruno Carmina Frank Dennis Esther George\nAlejandra         .     1       1     1      .      .      .\nBruno             1     .       .     .      .      .      .\nCarmina           1     .       .     1      1      1      .\nFrank             1     .       1     .      .      .      1\nDennis            .     .       1     .      .      1      1\nEsther            .     .       1     .      1      .      .\nGeorge            .     .       .     1      1      .      .\n\n\nFor example, Carmina (1, 0, 0, 1, 1, 1, 0) is directly connected to Alejandra (who has vertex index 1), Frank (index 4), Dennis (index 5) and Esther (index 6), but not to Bruno (index 2) or to George (index 7)."
  },
  {
    "objectID": "posts/assignment_network data/index.html#layouts-and-plotting",
    "href": "posts/assignment_network data/index.html#layouts-and-plotting",
    "title": "Practice with Network Data",
    "section": "Layouts and plotting",
    "text": "Layouts and plotting\nA graph is an abstract mathematical object without a specific representation in 2D, 3D or any other geometric space. This means that whenever we want to visualise a graph, we have to find a mapping from vertices to coordinates in two- or three-dimensional space first, preferably in a way that is useful and/or pleasing for the eye. A separate branch of graph theory, namely graph drawing, tries to solve this problem via several graph layout algorithms. igraph implements quite a few layout algorithms and is also able to draw them onto the screen or to any output format that R itself supports.\n\nLayout algorithms\nThe layout functions in igraph always start with layout. The following table summarises them:\n\n\n\n\n\n\n\nMethod name\nAlgorithm description\n\n\n\n\nlayout_randomly\nPlaces the vertices completely randomly\n\n\nlayout_in_circle\nDeterministic layout that places the vertices on a circle\n\n\nlayout_on_sphere\nDeterministic layout that places the vertices evenly on the surface of a sphere\n\n\nlayout_with_drl\nThe Drl (Distributed Recursive Layout) algorithm for large graphs\n\n\nlayout_with_fr\nFruchterman-Reingold force-directed algorithm\n\n\nlayout_with_kk\nKamada-Kawai force-directed algorithm\n\n\nlayout_with_lgl\nThe LGL (Large Graph Layout) algorithm for large graphs\n\n\nlayout_as_tree\nReingold-Tilford tree layout, useful for (almost) tree-like graphs\n\n\nlayout_nicely\nLayout algorithm that automatically picks one of the other algorithms based on certain properties of the graph\n\n\n\nLayout algorithms can be called directly with a graph as its first argument. They will return a matrix with two columns and as many rows as the number of vertices in the graph; each row will correspond to the position of a single vertex, ordered by vertex IDs. Some algorithms have a 3D variant; in this case they return three columns instead of 2.\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\nSome layout algorithms take additional arguments; e.g., when laying out a graph as a tree, it might make sense to specify which vertex is to be placed at the root of the layout:\n\n\nCode\nlayout &lt;- layout_as_tree(g, root = 2)\n\n\n\n\nDrawing a graph using a layout\nWe can plot our imaginary social network with the Kamada-Kawai layout algorithm as follows:\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\n\n\nCode\nplot(g, layout = layout, main = \"Social network with the Kamada-Kawai layout algorithm\")\n\n\n\n\n\nThis should open a new window showing a visual representation of the network. Remember that the exact placement of nodes may be different on your machine since the layout is not deterministic.\nThe layout argument also accepts functions; in this case, the function will be called with the graph as its first argument. This makes it possible to just pass the name of a layout function directly, without creating a layout variable:\n\n\nCode\nplot(g, layout = layout_with_fr,\n     main = \"Social network with the Fruchterman-Reingold layout algorithm\")\n\n\n\n\n\nTo improve the visuals, a trivial addition would be to color the vertices according to the gender. We should also try to place the labels slightly outside the vertices to improve readability:\n\n\nCode\nV(g)$color &lt;- ifelse(V(g)$gender == \"m\", \"yellow\", \"red\")\nplot(g, layout = layout, vertex.label.dist = 3.5,\n     main = \"Social network - with genders as colors\")\n\n\n\n\n\nYou can also treat the gender attribute as a factor and provide the colors with an argument to plot(), which takes precedence over the color vertex attribute. Colors will be assigned automatically to levels of a factor:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.color=as.factor(V(g)$gender))\n\n\n\n\n\nAs seen above with the vertex.color argument, you can specify visual properties as arguments to plot instead of using vertex or edge attributes. The following plot shows the formal ties with thick lines while informal ones with thin lines:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.size=20,\n     vertex.color=ifelse(V(g)$gender == \"m\", \"yellow\", \"red\"),\n     edge.width=ifelse(E(g)$is_formal, 5, 1))\n\n\n\n\n\nThis latter approach is preferred if you want to keep the properties of the visual representation of your graph separate from the graph itself.\nIn summary, there are special vertex and edge properties that correspond to the visual representation of the graph. These attributes override the default settings of igraph (i.e color, weight, name, shape,layout,etc.). The following two tables summarise the most frequently used visual attributes for vertices and edges, respectively:\n\n\nVertex attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nvertex.color\nColor of the vertex\n\n\nlabel\nvertex.label\nLabel of the vertex. They will be converted to character. Specify NA to omit vertex labels. The default vertex labels are the vertex ids.\n\n\nlabel.cex\nvertex.label.cex\nFont size of the vertex label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nvertex.label.color\nColor of the vertex label\n\n\nlabel.degree\nvertex.label.degree\nIt defines the position of the vertex labels, relative to the center of the vertices. It is interpreted as an angle in radian, zero means ‘to the right’, and ‘pi’ means to the left, up is -pi/2 and down is pi/2. The default value is -pi/4\n\n\nlabel.dist\nvertex.label.dist\nDistance of the vertex label from the vertex itself, relative to the vertex size\n\n\nlabel.family\nvertex.label.family\nFont family of the vertex, similarly to R’s text function\n\n\nlabel.font\nvertex.label.font\nFont within the font family of the vertex, similarly to R’s text function\n\n\nshape\nvertex.shape\nThe shape of the vertex, currently “circle”, “square”, “csquare”, “rectangle”, “crectangle”, “vrectangle”, “pie” (see vertex.shape.pie), ‘sphere’, and “none” are supported, and only by the plot.igraph command.\n\n\nsize\nvertex.size\nThe size of the vertex, a numeric scalar or vector, in the latter case each vertex sizes may differ\n\n\n\n\n\nEdge attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nedge.color\nColor of the edge\n\n\ncurved\nedge.curved\nA numeric value specifies the curvature of the edge; zero curvature means straight edges, negative values means the edge bends clockwise, positive values the opposite. TRUE means curvature 0.5, FALSE means curvature zero\n\n\narrow.size\nedge.arrow.size\nCurrently this is a constant, so it is the same for every edge. If a vector is submitted then only the first element is used, ie. if this is taken from an edge attribute then only the attribute of the first edge is used for all arrows.\n\n\narrow.width\nedge.arrow.width\nThe width of the arrows. Currently this is a constant, so it is the same for every edge\n\n\nwidth\nedge.width\nWidth of the edge in pixels\n\n\nlabel\nedge.label\nIf specified, it adds a label to the edge.\n\n\nlabel.cex\nedge.label.cex\nFont size of the edge label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nedge.label.color\nColor of the edge label\n\n\nlabel.family\nedge.label.family\nFont family of the edge, similarly to R’s text function\n\n\nlabel.font\nedge.label.font\nFont within the font family of the edge, similarly to R’s text function\n\n\n\n\n\nGeneric arguments of plot()\nThese settings can be specified as arguments to the plot function to control the overall appearance of the plot.\n\n\n\n\n\n\n\nKeyword argument\nPurpose\n\n\n\n\nlayout\nThe layout to be used. It can be an instance of Layout, a list of tuples containing X-Y coordinates, or the name of a layout algorithm. The default is auto, which selects a layout algorithm automatically based on the size and connectedness of the graph.\n\n\nmargin\nThe amount of empty space below, over, at the left and right of the plot, it is a numeric vector of length four."
  },
  {
    "objectID": "posts/assignment_network data/index.html#assignment",
    "href": "posts/assignment_network data/index.html#assignment",
    "title": "Practice with Network Data",
    "section": "ASSIGNMENT",
    "text": "ASSIGNMENT\nImprove the network above by:\n\nColoring the edges according to Advisor / BCB520 attribute.\nColoring the nodes according to Department.\nAdjusting the labels to improve readability.\nFind the best layout you can for this garbage. What a nightmare."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robyn’s Portfolio",
    "section": "",
    "text": "Practice with Network Data\n\n\nNodes and Links and edges and vertices…\n\n\n\n\nPortfolio\n\n\nDataViz\n\n\nNetwork\n\n\niGraph\n\n\nAssignment\n\n\n\n\niGRAPH!\n\n\n\n\n\n\nApr 4, 2024\n\n\nBarrie Robison\n\n\n\n\n\n\n  \n\n\n\n\nBCB 520 - Midterm Portfolio Post\n\n\nComparing University of Idaho grants to similar schools\n\n\n\n\nassignment\n\n\n\n\nIn Progress…\n\n\n\n\n\n\nMar 14, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nThe Top 100 Young Adult Books\n\n\nSome Examples\n\n\n\n\nother\n\n\nnotes\n\n\n\n\nExamining the Data in the File\n\n\n\n\n\n\nFeb 18, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 4\n\n\nMarks and Channels\n\n\n\n\nassignment\n\n\n\n\nIn progress…\n\n\n\n\n\n\nFeb 11, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 2\n\n\nDescribing Data\n\n\n\n\nassignment\n\n\n\n\nGoodreads Rating Data.\n\n\n\n\n\n\nFeb 10, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nNotes\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nRobyn Stevley\n\n\n\n\n\n\nNo matching items"
  }
]