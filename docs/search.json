[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The Evergreen State College | Olympia WA | Bachelor of Science | Sept 2018 - June 2022"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "",
    "text": "The Evergreen State College | Olympia WA | Bachelor of Science | Sept 2018 - June 2022"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html",
    "href": "posts/Top100YABooks/Top100YABooks.html",
    "title": "The Top 100 Young Adult Books",
    "section": "",
    "text": "Calling the Library:\n\n\nCode\nlibrary(tidyverse)\n\n\nReading the File:\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html#set-up",
    "href": "posts/Top100YABooks/Top100YABooks.html#set-up",
    "title": "The Top 100 Young Adult Books",
    "section": "",
    "text": "Calling the Library:\n\n\nCode\nlibrary(tidyverse)\n\n\nReading the File:\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")"
  },
  {
    "objectID": "posts/Top100YABooks/Top100YABooks.html#the-graphs",
    "href": "posts/Top100YABooks/Top100YABooks.html#the-graphs",
    "title": "The Top 100 Young Adult Books",
    "section": "The Graphs",
    "text": "The Graphs\nAn overview of the length of these books. A Histogram.\n\n\nCode\n#Book length (number of pages)\nfig &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, fill=\"blue\")\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Pages for Top 100 Young Adult Books\",\n                 x = \"Number of Pages\",\n                 y = \"Number of Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"beige\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n\n\n\n\nSeries vs Non-Series. A bar plot… maybe?\nI would like to figure out how to make this with two bars, one for series and one for stand-alone books. Or I would like to change the labels on the bars.\n\n\nCode\n#Series vs non-series\n#BOOKS$series_Q &lt;- ifelse(is.na(BOOKS$series), \"Stand Alone\", \"Series\") \n\nfig &lt;- ggplot(BOOKS, aes(x = numberOfSeries))+ geom_bar(position = \"dodge\", color = \"navy\", fill = \"blue\")\n\n#Style\nfig_label &lt;- labs(title = \"Books in Series Vs. Stand Alones\",\n                  x = \"Position in Series\",\n                  y = \"Number of Books\")\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_label + fig_theme\n\nprint(fig)\n\n\n\n\n\nHow Popular of these books?\nA histogram of the number of books with a certain rating and a scatter plot of ratings vs. number of ratings.\n\n\nCode\n#Number of Ratings\nsuppressWarnings({\nfig &lt;- ggplot(BOOKS, aes(x = numRatings))+ geom_histogram(binwidth = 50000)\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n})\n\n\n\n\n\nNumber of Ratings vs. Rating\n\n\nCode\n#Number of Ratings vs. Rating\nsuppressWarnings({\nfig &lt;- ggplot(BOOKS, aes(x = numRatings, y = rating))+ geom_point()\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n})\n\n\n\n\n\nBook Format\n\n\n\n\n\n\nNote\n\n\n\nThis is an irrelevant graph because the book format is random and depends only on what version of the book was uploaded to the list by whoever uploaded it. I just wanted to practice making the graph.\n\n\n\n\nCode\nfig &lt;- ggplot(BOOKS, aes(x = bookFormat))+ geom_bar(position = \"dodge\", color = \"red\", fill = \"pink\")\n\n#Style\nfig_label &lt;- labs(title = \"Books format: a completly useless graph\")\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_label + fig_theme\n\nprint(fig)\n\n\n\n\n\nNumber of Ratings\n\n\nCode\n#Number of Ratings\nfig &lt;- ggplot(BOOKS, aes(x = publishedYear))+ geom_histogram(binwidth = 1)\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n\n\n\n\nRating Per Year\n\n\nCode\n#Number of Ratings vs. Rating\nsuppressWarnings({\n\nfig &lt;- ggplot(BOOKS, aes(x = publishedYear, y = numRatings))+ geom_point()\n\n#Style\nfig_labs &lt;- labs(title = \"Number of Ratings for Top 100 Young Adult Books\")\n\nfig_theme &lt;- theme(panel.background=element_rect(fill=\"white\"))\n\n#Showing figure 4\nfig &lt;- fig + fig_labs + fig_theme\n\nprint(fig)\n\n})"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Notes",
    "section": "",
    "text": "A place to keep interesting or useful things."
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html",
    "href": "posts/midterm assignment/Midterm.html",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "",
    "text": "This post compares the University of Idaho grant awards from the department of agriculture (USDA), the department of energy (DOE), the national institute of health (NIH), and the national science foundation (NSF) to other similar universities."
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html#question-2",
    "href": "posts/midterm assignment/Midterm.html#question-2",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Question 2",
    "text": "Question 2\nWhat is the proportional representation of new awards to the UI from these various sources over the past 5 to 10 years? Are there any trends that are encouraging or discouraging?\n\n\nCode\n#Trends over time\n\n# a graph showing the number of new awards from each source (or just awards in the case of USDA) vs time, with a different line for each source.\n# a graph showing the amount of money per new awards vs. time for each source.\n\n\n#Question_2_1 &lt;- \n#ggplot"
  },
  {
    "objectID": "posts/midterm assignment/Midterm.html#comparing-the-schools",
    "href": "posts/midterm assignment/Midterm.html#comparing-the-schools",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Comparing the Schools",
    "text": "Comparing the Schools\n\n\nCode\n# a graph showing a comparison of awards (or award money) given to each school by source. so a clump showing the number of awards (or amount of money) from for example from the NSF for each school then another clump for NIH, etc. Color coded by school for visibility across clumps. Note: active awards only. For the USDA awards use date = 2024\n\n\n# need to organize data\n\n\n\nQ3_1_1 &lt;- combined_data %&gt;%\n  group_by(Institution)\n\nggplot(Q3_1_1, aes(fill=Institution, y='Award Amount', x=Source)) + \n    geom_bar(position=\"dodge\", stat=\"identity\")\n\n\n\n\n\n\n\nCode\n#comparing the schools to each other\n\n# a graph comparing trends for each school (are any downturns coming for all the schools?). color coded and shape coded to clump schools, and sources. Colors for schools, shapes for sources, e.g. solid lines for NSF, rect dash for NIH, triangles dash for DOE, dots dash for USDA."
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html",
    "href": "posts/assignment 2/assignment 2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "This Data is “Best Books (10k) Multi-Genre Data” data set from Kaggle. It’s from the “Books That Everyone Should Read At Least Once” list on Goodreads.\nTitle of Book: The Label for the data.\nAuthor: A category.\nA Description of the Book.\nGenres: Categories that I want to analyze.\nAverage Rating: Quantitative.\nNumber of Ratings: Quantitative.\nURL:\n\n\n\n\n\nCode\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_data.csv\")\nhead(BOOKS)\n\n\n  X                                                        Book\n1 0                                       To Kill a Mockingbird\n2 1 Harry Potter and the Philosopher’s Stone (Harry Potter, #1)\n3 2                                         Pride and Prejudice\n4 3                                   The Diary of a Young Girl\n5 4                                                 Animal Farm\n6 5                                           The Little Prince\n                    Author\n1               Harper Lee\n2             J.K. Rowling\n3              Jane Austen\n4               Anne Frank\n5            George Orwell\n6 Antoine de Saint-Exupéry\nescription\n1                                                                                                                                                                                                                                The unforgettable novel of a childhood in a sleepy Southern town and the crisis of conscience that rocked it. \"To Kill A Mockingbird\" became both an instant bestseller and a critical success when it was first published in 1960. It went on to win the Pulitzer Prize in 1961 and was later made into an Academy Award-winning film, also a classic.Compassionate, dramatic, and deeply moving, \"To Kill A Mockingbird\" takes readers to the roots of human behavior - to innocence and experience, kindness and cruelty, love and hatred, humor and pathos. Now with over 18 million copies in print and translated into forty languages, this regional story by a young Alabama woman claims universal appeal. Harper Lee always considered her book to be a simple love story. Today it is regarded as a masterpiece of American literature.\narry Potter thinks he is an ordinary boy - until he is rescued by an owl, taken to Hogwarts School of Witchcraft and Wizardry, learns to play Quidditch and does battle in a deadly duel. The Reason ... HARRY POTTER IS A WIZARD!\n3                                                                                                                                                                                                                                                                                                                                                                                                          Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \"her own darling child\" and its vivacious heroine, Elizabeth Bennet, \"as delightful a creature as ever appeared in print.\" The romantic clash between the opinionated Elizabeth and her proud beau, Mr. Darcy, is a splendid performance of civilized sparring. And Jane Austen's radiant wit sparkles as her characters dance a delicate quadrille of flirtation and intrigue, making this book the most superb comedy of manners of Regency England.Alternate cover edition of ISBN 9780679783268\n4 Discovered in the attic in which she spent the last years of her life, Anne Frank’s remarkable diary has become a world classic—a powerful reminder of the horrors of war and an eloquent testament to the human spirit. In 1942, with the Nazis occupying Holland, a thirteen-year-old Jewish girl and her family fled their home in Amsterdam and went into hiding. For the next two years, until their whereabouts were betrayed to the Gestapo, the Franks and another family lived cloistered in the “Secret Annexe” of an old office building. Cut off from the outside world, they faced hunger, boredom, the constant cruelties of living in confined quarters, and the ever-present threat of discovery and death. In her diary Anne Frank recorded vivid impressions of her experiences during this period. By turns thoughtful, moving, and surprisingly humorous, her account offers a fascinating commentary on human courage and frailty and a compelling self-portrait of a sensitive and spirited young woman whose promise was tragically cut short.--back cover\n5                                                                                                                                                                                                                                                                      Librarian's note: There is an Alternate Cover Edition for this edition of this book here.A farm is taken over by its overworked, mistreated animals. With flaming idealism and stirring slogans, they set out to create a paradise of progress, justice, and equality. Thus the stage is set for one of the most telling satiric fables ever penned –a razor-edged fairy tale for grown-ups that records the evolution from revolution against tyranny to a totalitarianism just as terrible. When Animal Farm was first published, Stalinist Russia was seen as its target. Today it is devastatingly clear that wherever and whenever freedom is attacked, under whatever banner, the cutting clarity and savage comedy of George Orwell’s masterpiece have a meaning and message still ferociously fresh.\n6                                                                                                                                                                                                                                                                         A pilot stranded in the desert awakes one morning to see, standing before him, the most extraordinary little fellow. \"Please,\" asks the stranger, \"draw me a sheep.\" And the pilot realizes that when life's events are too difficult to understand, there is no choice but to succumb to their mysteries. He pulls out pencil and paper... And thus begins this wise and enchanting fable that, in teaching the secret of what is really important in life, has changed forever the world for its readers.Few stories are as widely read and as universally cherished by children and adults alike as The Little Prince, presented here in a stunning new translation with carefully restored artwork. The definitive edition of a worldwide classic, it will capture the hearts of readers of all ages.\n                                                                                              Genres\n1 ['Classics', 'Fiction', 'Historical Fiction', 'School', 'Literature', 'Young Adult', 'Historical']\n2            ['Fantasy', 'Fiction', 'Young Adult', 'Magic', 'Childrens', 'Middle Grade', 'Classics']\n3  ['Classics', 'Fiction', 'Romance', 'Historical Fiction', 'Literature', 'Historical', 'Audiobook']\n4            ['Classics', 'Nonfiction', 'History', 'Biography', 'Memoir', 'Historical', 'Holocaust']\n5                 ['Classics', 'Fiction', 'Dystopia', 'Fantasy', 'Politics', 'School', 'Literature']\n6             ['Classics', 'Fiction', 'Fantasy', 'Childrens', 'France', 'Philosophy', 'Young Adult']\n  Avg_Rating Num_Ratings\n1       4.27   5,691,311\n2       4.47   9,278,135\n3       4.28   3,944,155\n4       4.18   3,488,438\n5       3.98   3,575,172\n6       4.32   1,924,063\n                                                                                 URL\n1                     https://www.goodreads.com/book/show/2657.To_Kill_a_Mockingbird\n2 https://www.goodreads.com/book/show/72193.Harry_Potter_and_the_Philosopher_s_Stone\n3                       https://www.goodreads.com/book/show/1885.Pride_and_Prejudice\n4                https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl\n5                             https://www.goodreads.com/book/show/170448.Animal_Farm\n6                       https://www.goodreads.com/book/show/157993.The_Little_Prince\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_histogram(binwidth = 0.01)\n\n\n\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_density()"
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html#description-of-data",
    "href": "posts/assignment 2/assignment 2.html#description-of-data",
    "title": "Assignment 2",
    "section": "",
    "text": "This Data is “Best Books (10k) Multi-Genre Data” data set from Kaggle. It’s from the “Books That Everyone Should Read At Least Once” list on Goodreads.\nTitle of Book: The Label for the data.\nAuthor: A category.\nA Description of the Book.\nGenres: Categories that I want to analyze.\nAverage Rating: Quantitative.\nNumber of Ratings: Quantitative.\nURL:"
  },
  {
    "objectID": "posts/assignment 2/assignment 2.html#the-data",
    "href": "posts/assignment 2/assignment 2.html#the-data",
    "title": "Assignment 2",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_data.csv\")\nhead(BOOKS)\n\n\n  X                                                        Book\n1 0                                       To Kill a Mockingbird\n2 1 Harry Potter and the Philosopher’s Stone (Harry Potter, #1)\n3 2                                         Pride and Prejudice\n4 3                                   The Diary of a Young Girl\n5 4                                                 Animal Farm\n6 5                                           The Little Prince\n                    Author\n1               Harper Lee\n2             J.K. Rowling\n3              Jane Austen\n4               Anne Frank\n5            George Orwell\n6 Antoine de Saint-Exupéry\nescription\n1                                                                                                                                                                                                                                The unforgettable novel of a childhood in a sleepy Southern town and the crisis of conscience that rocked it. \"To Kill A Mockingbird\" became both an instant bestseller and a critical success when it was first published in 1960. It went on to win the Pulitzer Prize in 1961 and was later made into an Academy Award-winning film, also a classic.Compassionate, dramatic, and deeply moving, \"To Kill A Mockingbird\" takes readers to the roots of human behavior - to innocence and experience, kindness and cruelty, love and hatred, humor and pathos. Now with over 18 million copies in print and translated into forty languages, this regional story by a young Alabama woman claims universal appeal. Harper Lee always considered her book to be a simple love story. Today it is regarded as a masterpiece of American literature.\narry Potter thinks he is an ordinary boy - until he is rescued by an owl, taken to Hogwarts School of Witchcraft and Wizardry, learns to play Quidditch and does battle in a deadly duel. The Reason ... HARRY POTTER IS A WIZARD!\n3                                                                                                                                                                                                                                                                                                                                                                                                          Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \"her own darling child\" and its vivacious heroine, Elizabeth Bennet, \"as delightful a creature as ever appeared in print.\" The romantic clash between the opinionated Elizabeth and her proud beau, Mr. Darcy, is a splendid performance of civilized sparring. And Jane Austen's radiant wit sparkles as her characters dance a delicate quadrille of flirtation and intrigue, making this book the most superb comedy of manners of Regency England.Alternate cover edition of ISBN 9780679783268\n4 Discovered in the attic in which she spent the last years of her life, Anne Frank’s remarkable diary has become a world classic—a powerful reminder of the horrors of war and an eloquent testament to the human spirit. In 1942, with the Nazis occupying Holland, a thirteen-year-old Jewish girl and her family fled their home in Amsterdam and went into hiding. For the next two years, until their whereabouts were betrayed to the Gestapo, the Franks and another family lived cloistered in the “Secret Annexe” of an old office building. Cut off from the outside world, they faced hunger, boredom, the constant cruelties of living in confined quarters, and the ever-present threat of discovery and death. In her diary Anne Frank recorded vivid impressions of her experiences during this period. By turns thoughtful, moving, and surprisingly humorous, her account offers a fascinating commentary on human courage and frailty and a compelling self-portrait of a sensitive and spirited young woman whose promise was tragically cut short.--back cover\n5                                                                                                                                                                                                                                                                      Librarian's note: There is an Alternate Cover Edition for this edition of this book here.A farm is taken over by its overworked, mistreated animals. With flaming idealism and stirring slogans, they set out to create a paradise of progress, justice, and equality. Thus the stage is set for one of the most telling satiric fables ever penned –a razor-edged fairy tale for grown-ups that records the evolution from revolution against tyranny to a totalitarianism just as terrible. When Animal Farm was first published, Stalinist Russia was seen as its target. Today it is devastatingly clear that wherever and whenever freedom is attacked, under whatever banner, the cutting clarity and savage comedy of George Orwell’s masterpiece have a meaning and message still ferociously fresh.\n6                                                                                                                                                                                                                                                                         A pilot stranded in the desert awakes one morning to see, standing before him, the most extraordinary little fellow. \"Please,\" asks the stranger, \"draw me a sheep.\" And the pilot realizes that when life's events are too difficult to understand, there is no choice but to succumb to their mysteries. He pulls out pencil and paper... And thus begins this wise and enchanting fable that, in teaching the secret of what is really important in life, has changed forever the world for its readers.Few stories are as widely read and as universally cherished by children and adults alike as The Little Prince, presented here in a stunning new translation with carefully restored artwork. The definitive edition of a worldwide classic, it will capture the hearts of readers of all ages.\n                                                                                              Genres\n1 ['Classics', 'Fiction', 'Historical Fiction', 'School', 'Literature', 'Young Adult', 'Historical']\n2            ['Fantasy', 'Fiction', 'Young Adult', 'Magic', 'Childrens', 'Middle Grade', 'Classics']\n3  ['Classics', 'Fiction', 'Romance', 'Historical Fiction', 'Literature', 'Historical', 'Audiobook']\n4            ['Classics', 'Nonfiction', 'History', 'Biography', 'Memoir', 'Historical', 'Holocaust']\n5                 ['Classics', 'Fiction', 'Dystopia', 'Fantasy', 'Politics', 'School', 'Literature']\n6             ['Classics', 'Fiction', 'Fantasy', 'Childrens', 'France', 'Philosophy', 'Young Adult']\n  Avg_Rating Num_Ratings\n1       4.27   5,691,311\n2       4.47   9,278,135\n3       4.28   3,944,155\n4       4.18   3,488,438\n5       3.98   3,575,172\n6       4.32   1,924,063\n                                                                                 URL\n1                     https://www.goodreads.com/book/show/2657.To_Kill_a_Mockingbird\n2 https://www.goodreads.com/book/show/72193.Harry_Potter_and_the_Philosopher_s_Stone\n3                       https://www.goodreads.com/book/show/1885.Pride_and_Prejudice\n4                https://www.goodreads.com/book/show/48855.The_Diary_of_a_Young_Girl\n5                             https://www.goodreads.com/book/show/170448.Animal_Farm\n6                       https://www.goodreads.com/book/show/157993.The_Little_Prince\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_histogram(binwidth = 0.01)\n\n\n\n\n\n\n\nCode\nggplot(BOOKS, aes(Avg_Rating))+ geom_density()"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html",
    "href": "posts/assignment 4/assignment 4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\nThe Data sets being used:\nTop 100 Young Adult Books\n52,000 Animated Movies\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")\nMOVIES &lt;- read.csv(\"Animation_Movies.csv\")\n\n\n\n\nFigure 1\n\n\nCode\n# a graph that shows the relationship between ordered data clearly and does not imply an ordering where there is none.\n\n\nFigure 2\n\n\nCode\n# a graph that messes up the relationship between ordered data and unordered data. The relationship of the order is confusing and possibly relationship are implied that don't exist.\n\n\n\n\n\n\n\nCode\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)\n\n\n\n\n\n\n\n\nFigure 5\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while maintaining separability.\n\n\nFigure 6\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while and confuses separability.\n\n\n\n\n\nFigure 7\n\n\nCode\n# a graph where popout is used\n\n\nFigure 8\n\n\nCode\n# a graph where popout is not used"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#expressiveness-and-effectiveness",
    "href": "posts/assignment 4/assignment 4.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 1\n\n\nCode\n# a graph that shows the relationship between ordered data clearly and does not imply an ordering where there is none.\n\n\nFigure 2\n\n\nCode\n# a graph that messes up the relationship between ordered data and unordered data. The relationship of the order is confusing and possibly relationship are implied that don't exist."
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#discriminability",
    "href": "posts/assignment 4/assignment 4.html#discriminability",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)"
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#separability",
    "href": "posts/assignment 4/assignment 4.html#separability",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 5\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while maintaining separability.\n\n\nFigure 6\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while and confuses separability."
  },
  {
    "objectID": "posts/assignment 4/assignment 4.html#popout",
    "href": "posts/assignment 4/assignment 4.html#popout",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 7\n\n\nCode\n# a graph where popout is used\n\n\nFigure 8\n\n\nCode\n# a graph where popout is not used"
  },
  {
    "objectID": "posts/assignment_network data/index.html",
    "href": "posts/assignment_network data/index.html",
    "title": "Practice with Network Data",
    "section": "",
    "text": "In this assignment, we’ll consider some of the tools and techniques for visualizing network data. Network data is characterized by two unique items that are not found in tabular or spatial data - Nodes and Links. In addition, there is a sub-type of network data that we will consider - Hierarchical or Tree data. Let’s practice a few visualizations to get a feel for how these things work!"
  },
  {
    "objectID": "posts/assignment_network data/index.html#igraph",
    "href": "posts/assignment_network data/index.html#igraph",
    "title": "Practice with Network Data",
    "section": "IGRAPH",
    "text": "IGRAPH\nLet’s start with igraph, which is an open source toolset for network analysis. The great thing about igraph is that you can use these tools in R, Python, Mathematica, and C++. It is very flexible and very powerful.\n\nigraph in R\nFirst up, we’ll install R/igraph and load the library (note that I’ve commented out the package installation because I’ve already installed igraph on my machine):\n\n\nCode\n# install.packages(\"igraph\")\nlibrary(igraph)\n\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n\nNow I’m going to walk you through a modified version of the igraph tutorial, which you can find here"
  },
  {
    "objectID": "posts/assignment_network data/index.html#creating-a-graph",
    "href": "posts/assignment_network data/index.html#creating-a-graph",
    "title": "Practice with Network Data",
    "section": "Creating a graph",
    "text": "Creating a graph\nigraph offers many ways to create a graph. The simplest one is the function make_empty_graph:\n\n\nCode\ng &lt;- make_empty_graph()\n\n\nThe most common way to create a graph is make_graph, which constructs a network based on specified edges. For example, to make a graph with 10 nodes (numbered 1 to 10) and two edges connecting nodes 1-2 and 1-5:\n\n\nCode\ng &lt;- make_graph(edges = c(1,2, 1,5), n=10, directed = FALSE)\n\n\nWe can print the graph to get a summary of its nodes and edges:\n\n\nCode\ng\n\n\nIGRAPH a249cea U--- 10 2 -- \n+ edges from a249cea:\n[1] 1--2 1--5\n\n\nThis means: Undirected Named graph with 10 vertices and 2 edges, with the exact edges listed out. If the graph has a [name] attribute, it is printed as well.\n\n\n\n\n\n\nNote\n\n\n\nsummary does not list the edges, which is convenient for large graphs with millions of edges:\n\n\n\n\nCode\nsummary(g)\n\n\nIGRAPH a249cea U--- 10 2 -- \n\n\nThe same function make_graph can create some notable graphs by just specifying their name. For example you can create the graph that represents the social network of Zachary’s karate club, that shows the friendship between 34 members of a karate club at a US university in the 1970s:\n\n\nCode\ng &lt;- make_graph('Zachary')\n\n\nTo visualize a graph you can use plot:\n\n\nCode\nplot(g)"
  },
  {
    "objectID": "posts/assignment_network data/index.html#vertex-and-edge-ids",
    "href": "posts/assignment_network data/index.html#vertex-and-edge-ids",
    "title": "Practice with Network Data",
    "section": "Vertex and edge IDs",
    "text": "Vertex and edge IDs\nVertices and edges have numerical vertex IDs in igraph. Vertex IDs are always consecutive and they start with 1. For a graph with n vertices the vertex IDs are always between 1 and n. If some operation changes the number of vertices in the graphs, e.g. a subgraph is created via induced_subgraph, then the vertices are renumbered to satisfy this criterion.\nThe same is true for the edges as well: edge IDs are always between 1 and m, the total number of edges in the graph.\nIn addition to IDs, vertices and edges can be assigned a name and other attributes. That makes it easier to track them whenever the graph is altered."
  },
  {
    "objectID": "posts/assignment_network data/index.html#addingdeleting-vertices-and-edges",
    "href": "posts/assignment_network data/index.html#addingdeleting-vertices-and-edges",
    "title": "Practice with Network Data",
    "section": "Adding/deleting vertices and edges",
    "text": "Adding/deleting vertices and edges\nLet’s continue working with the Karate club graph. To add one or more vertices to an existing graph, use add_vertices:\n\n\nCode\ng &lt;- add_vertices(g, 3)\n\n\nSimilarly, to add edges you can use add_edges:\n\n\nCode\ng &lt;- add_edges(g, edges = c(1,35, 1,36, 34,37))\n\n\nEdges are added by specifying the source and target vertex IDs for each edge. This call added three edges, one connecting vertices 1 and 35, one connecting vertices 1 and 36, and one connecting vertices 34 and 37.\nIn addition to the add_vertices and add_edges functions, the plus operator can be used to add vertices or edges to graph. The actual operation that is performed depends on the type of the right hand side argument:\n\n\nCode\ng &lt;- g + edges(c(1,35, 1,36, 34,37))\n\n\nYou can add a single vertex/edge at a time using add_vertex and add_edge.\nLet us add some more vertices and edges to our graph. In igraph we can use the magrittr package, which provides a mechanism for chaining commands with the operator %\\&gt;%:\n\n\nCode\ng &lt;- g %&gt;% add_edges(edges=c(1,34)) %&gt;% add_vertices(3) %&gt;%\n     add_edges(edges=c(38,39, 39,40, 40,38, 40,37))\ng\n\n\nIGRAPH 0a4743f U--- 40 86 -- Zachary\n+ attr: name (g/c)\n+ edges from 0a4743f:\n [1]  1-- 2  1-- 3  1-- 4  1-- 5  1-- 6  1-- 7  1-- 8  1-- 9  1--11  1--12\n[11]  1--13  1--14  1--18  1--20  1--22  1--32  2-- 3  2-- 4  2-- 8  2--14\n[21]  2--18  2--20  2--22  2--31  3-- 4  3-- 8  3--28  3--29  3--33  3--10\n[31]  3-- 9  3--14  4-- 8  4--13  4--14  5-- 7  5--11  6-- 7  6--11  6--17\n[41]  7--17  9--31  9--33  9--34 10--34 14--34 15--33 15--34 16--33 16--34\n[51] 19--33 19--34 20--34 21--33 21--34 23--33 23--34 24--26 24--28 24--33\n[61] 24--34 24--30 25--26 25--28 25--32 26--32 27--30 27--34 28--34 29--32\n[71] 29--34 30--33 30--34 31--33 31--34 32--33 32--34 33--34  1--35  1--36\n+ ... omitted several edges\n\n\nCode\nplot(g)\n\n\n\n\n\nWe now have an undirected graph with 40 vertices and 86 edges. Vertex and edge IDs are always contiguous, so if you delete a vertex all subsequent vertices will be renumbered. When a vertex is renumbered, edges are not renumbered, but their source and target vertices will be. Use delete_vertices and delete_edges to perform these operations. For instance, to delete the edge connecting vertices 1-34, get its ID and then delete it:\n\n\nCode\nget.edge.ids(g, c(1,34))\n\n\n[1] 82\n\n\n\n\nCode\ng &lt;- delete_edges(g, 82)\n\n\nAs an example, to create a broken ring:\n\n\nCode\ng &lt;- make_ring(10) %&gt;% delete_edges(\"10|1\")\nplot(g)\n\n\n\n\n\nThe example above shows that you can also refer to edges with strings containing the IDs of the source and target vertices, connected by a pipe symbol |. \"10|1\" in the above example means the edge that connects vertex 10 to vertex 1. Of course you can also use the edge IDs directly, or retrieve them with the get.edge.ids function:\n\n\nCode\ng &lt;- make_ring(5)\ng &lt;- delete_edges(g, get.edge.ids(g, c(1,5, 4,5)))\nplot(g)"
  },
  {
    "objectID": "posts/assignment_network data/index.html#constructing-graphs",
    "href": "posts/assignment_network data/index.html#constructing-graphs",
    "title": "Practice with Network Data",
    "section": "Constructing graphs",
    "text": "Constructing graphs\nIn addition to make_empty_graph, make_graph, and make_graph_from_literal, igraph includes many other function to construct a graph. Some are deterministic, i.e. they produce the same graph each single time, e.g. make_tree:\n\n\nCode\ngraph1 &lt;- make_tree(127, 2, mode = \"undirected\")\nsummary(graph1)\n\n\nIGRAPH 036b8b0 U--- 127 126 -- Tree\n+ attr: name (g/c), children (g/n), mode (g/c)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a regular tree graph with 127 vertices, each vertex having two children. No matter how many times you call make_tree, the generated graph will always be the same if you use the same parameters:\n\n\nCode\ngraph2 &lt;- make_tree(127, 2, mode = \"undirected\")\n\n\n\n\nCode\nidentical_graphs(graph1,graph2)\n\n\n[1] TRUE\n\n\nOther functions generate graphs stochastically, i.e. they produce a different graph each time. For instance sample_grg:\n\n\nCode\ngraph1 &lt;- sample_grg(100, 0.2)\nsummary(graph1)\n\n\nIGRAPH 938dc01 U--- 100 445 -- Geometric random graph\n+ attr: name (g/c), radius (g/n), torus (g/l)\n\n\nCode\nplot(graph1)\n\n\n\n\n\nThis generates a geometric random graph: n points are chosen randomly and uniformly inside the unit square and pairs of points closer to each other than a predefined distance d are connected by an edge. If you generate GRGs with the same parameters, they will be different:\n\n\nCode\ngraph2 &lt;- sample_grg(100, 0.2)\nidentical_graphs(graph1, graph2)\n\n\n[1] FALSE\n\n\nCode\nplot(graph2)\n\n\n\n\n\nA slightly looser way to check if the graphs are equivalent is via isomorphic. Two graphs are said to be isomorphic if they have the same number of components (vertices and edges) and maintain a one-to-one correspondence between vertices and edges, i.e., they are connected in the same way.\n\n\nCode\nisomorphic(graph1, graph2)\n\n\n[1] FALSE\n\n\nChecking for isomorphism can take a while for large graphs (in this case, the answer can quickly be given by checking the degree sequence of the two graphs). identical_graph is a stricter criterion than isomorphic: the two graphs must have the same list of vertices and edges, in exactly the same order, with same directedness, and the two graphs must also have identical graph, vertex and edge attributes."
  },
  {
    "objectID": "posts/assignment_network data/index.html#setting-and-retrieving-attributes",
    "href": "posts/assignment_network data/index.html#setting-and-retrieving-attributes",
    "title": "Practice with Network Data",
    "section": "Setting and retrieving attributes",
    "text": "Setting and retrieving attributes\nIn addition to IDs, vertex and edges can have attributes such as a name, coordinates for plotting, metadata, and weights. The graph itself can have such attributes too (e.g. a name, which will show in summary). In a sense, every graph, vertex and edge can be used as an R namespace to store and retrieve these attributes.\nTo demonstrate the use of attributes, let us create a simple social network:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther)\n\n\nEach vertex represents a person, so we want to store ages, genders and types of connection between two people (is_formal refers to whether a connection between one person or another is formal or informal, i.e. colleagues or friends). The \\$ operator is a shortcut to get and set graph attributes. It is shorter and just as readable as graph_attr and set_graph_attr.\n\n\nCode\nV(g)$age &lt;- c(25, 31, 18, 23, 47, 22, 50) \nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\nE(g)$is_formal &lt;- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)\nsummary(g)\n\n\nIGRAPH 2d5397d UN-- 7 9 -- \n+ attr: name (v/c), age (v/n), gender (v/c), is_formal (e/l)\n\n\nV and E are the standard way to obtain a sequence of all vertices and edges, respectively. This assigns an attribute to all vertices/edges at once. Another way to generate our social network is with the use of set_vertex_attr and set_edge_attr and the operator %\\&gt;%:\n\n\nCode\ng &lt;- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,\n                George-Dennis:Frank, Dennis-Esther) %&gt;%\n  set_vertex_attr(\"age\", value = c(25, 31, 18, 23, 47, 22, 50)) %&gt;%\n  set_vertex_attr(\"gender\", value = c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")) %&gt;%\n  set_edge_attr(\"is_formal\", value = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE))\nsummary(g)\n\n\nTo assign or modify an attribute for a single vertex/edge:\n\n\nCode\nE(g)$is_formal\n\n\n[1] FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nCode\nE(g)$is_formal[1] &lt;- TRUE\nE(g)$is_formal\n\n\n[1]  TRUE FALSE  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n\n\nAttribute values can be set to any R object, but note that storing the graph in some file formats might result in the loss of complex attribute values. Vertices, edges and the graph itself can all be used to set attributes, e.g. to add a date to the graph:\n\n\nCode\ng$date &lt;- c(\"2022-02-11\")\ngraph_attr(g, \"date\")\n\n\n[1] \"2022-02-11\"\n\n\nTo retrieve attributes, you can also use graph_attr, vertex_attr, and edge_attr. To find the ID of a vertex you can use the function match:\n\n\nCode\nmatch(c(\"George\"), V(g)$name)\n\n\n[1] 7\n\n\nTo assign attributes to a subset of vertices or edges, you can use:\n\n\nCode\nV(g)$name[1:3] &lt;- c(\"Alejandra\", \"Bruno\", \"Carmina\")\nV(g)\n\n\n+ 7/7 vertices, named, from 2d5397d:\n[1] Alejandra Bruno     Carmina   Frank     Dennis    Esther    George   \n\n\nTo delete attributes:\n\n\nCode\ng &lt;- delete_vertex_attr(g, \"gender\")\nV(g)$gender\n\n\nNULL\n\n\nIf you want to save a graph in R with all the attributes use the R’s standard function dput function and retrieve it later with dget. You can also just save the R workspace and restore it later."
  },
  {
    "objectID": "posts/assignment_network data/index.html#structural-properties-of-graphs",
    "href": "posts/assignment_network data/index.html#structural-properties-of-graphs",
    "title": "Practice with Network Data",
    "section": "Structural properties of graphs",
    "text": "Structural properties of graphs\nigraph provides a large set of functions to calculate various structural properties of graphs. It is beyond the scope of this tutorial to document all of them, hence this section will only introduce a few of them for illustrative purposes. We will work on the small social network constructed in the previous section.\nPerhaps the simplest property one can think of is the degree. The degree of a vertex equals the number of edges adjacent to it. In case of directed networks, we can also define in-degree (the number of edges pointing towards the vertex) and out-degree (the number of edges originating from the vertex). igraph is able to calculate all of them using a simple syntax:\n\n\nCode\ndegree(g)\n\n\nAlejandra     Bruno   Carmina     Frank    Dennis    Esther    George \n        3         1         4         3         3         2         2 \n\n\nIf the graph was directed, we would have been able to calculate the in- and out-degrees separately using degree(mode=\"in\") and degree(mode=\"out\"). You can also pass a single vertex ID or a list of vertex IDs to degree if you want to calculate the degrees for only a subset of vertices:\n\n\nCode\ndegree(g, 7)\n\n\nGeorge \n     2 \n\n\n\n\nCode\ndegree(g, v=c(3,4,5))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nMost functions that accept vertex IDs also accept vertex names (i.e. the values of the name vertex attribute) as long as the names are unique:\n\n\nCode\ndegree(g, v=c(\"Carmina\", \"Frank\", \"Dennis\"))\n\n\nCarmina   Frank  Dennis \n      4       3       3 \n\n\nIt also works for single vertices:\n\n\nCode\ndegree(g, \"Bruno\")\n\n\nBruno \n    1 \n\n\nA similar syntax is used for most of the structural properties igraph can calculate. For vertex properties, the functions accept a vertex ID, a vertex name, or a list of vertex IDs or names (and if they are omitted, the default is the set of all vertices). For edge properties, the functions accept a single edge ID or a list of edge IDs.\n\nNOTE: For some measures, it does not make sense to calculate them only for a few vertices or edges instead of the whole graph, as it would take the same time anyway. In this case, the functions won’t accept vertex or edge IDs, but you can still restrict the resulting list later using standard operations. One such example is eigenvector centrality (evcent()).\n\nBesides degree, igraph includes built-in routines to calculate many other centrality properties, including vertex and edge betweenness (edge_betweenness) or Google’s PageRank (page_rank) just to name a few. Here we just illustrate edge betweenness:\n\n\nCode\nedge_betweenness(g)\n\n\n[1] 6 6 4 3 4 4 4 2 3\n\n\nNow we can also figure out which connections have the highest betweenness centrality:\n\n\nCode\nebs &lt;- edge_betweenness(g)\nas_edgelist(g)[ebs == max(ebs), ]\n\n\n     [,1]        [,2]     \n[1,] \"Alejandra\" \"Bruno\"  \n[2,] \"Alejandra\" \"Carmina\""
  },
  {
    "objectID": "posts/assignment_network data/index.html#querying-vertices-and-edges-based-on-attributes",
    "href": "posts/assignment_network data/index.html#querying-vertices-and-edges-based-on-attributes",
    "title": "Practice with Network Data",
    "section": "Querying vertices and edges based on attributes",
    "text": "Querying vertices and edges based on attributes\n\nSelecting vertices\nImagine that in a given social network, you want to find out who has the largest degree. You can do that with the tools presented so far and the which.max function:\n\n\nCode\nwhich.max(degree(g))\n\n\nCarmina \n      3 \n\n\nAnother example would be to select only vertices that have only odd IDs but not even ones, using the V function:\n\n\nCode\ngraph &lt;- graph.full(n=10)\nonly_odd_vertices &lt;- which(V(graph)%%2==1)\nlength(only_odd_vertices)\n\n\n[1] 5\n\n\nOf course, it is possible to select vertices or edges by positional indices:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7]\nseq\n\n\n+ 3/10 vertices, from a2165ca:\n[1] 2 3 7\n\n\n\n\nCode\nseq &lt;- seq[1, 3]    # filtering an existing vertex set\nseq\n\n\n+ 2/10 vertices, from a2165ca:\n[1] 2 7\n\n\nSelecting a vertex that does not exist results in an error:\n\n\nCode\nseq &lt;- V(graph)[2, 3, 7, \"foo\", 3.5]\n## Error in simple_vs_index(x, ii, na_ok) : Unknown vertex selected\n\n\nAttribute names can also be used as-is within the indexing brackets of V() and E(). This can be combined with R’s ability to use boolean vectors for indexing to obtain very concise and readable expressions to retrieve a subset of the vertex or edge set of a graph. For instance, the following command gives you the names of the individuals younger than 30 years in our social network:\n\n\nCode\nV(g)[age &lt; 30]$name\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Frank\"     \"Esther\"   \n\n\nOf course, &lt; is not the only boolean operator that can be used for this. Other possibilities include the following:\n\n\n\n\n\n\n\nOperator\nMeaning\n\n\n\n\n==\nThe attribute/property value must be equal to\n\n\n!=\nThe attribute/property value must not be equal to\n\n\n&lt;\nThe attribute/property value must be less than\n\n\n&lt;=\nThe attribute/property value must be less than or equal to\n\n\n&gt;\nThe attribute/property value must be greater than\n\n\n&gt;=\nThe attribute/property value must be greater than or equal to\n\n\n%in%\nThe attribute/property value must be included in\n\n\n\nYou can also create a “not in” operator from %in% using the Negate function:\n\n\nCode\n`%notin%` &lt;- Negate(`%in%`)\n\n\nIf an attribute has the same name as an igraph function, you should be careful as the syntax can become a little confusing. For instance, if there is an attribute named degree that represents the grades of an exam for each person, that should not be confused with the igraph function that computes the degrees of vertices in a network sense:\n\n\nCode\nV(g)$degree &lt;- c(\"A\", \"B\", \"B+\", \"A+\", \"C\", \"A\", \"B\")\nV(g)$degree[degree(g) == 3]\n\n\n[1] \"A\"  \"A+\" \"C\" \n\n\n\n\nCode\nV(g)$name[degree(g) == 3]\n\n\n[1] \"Alejandra\" \"Frank\"     \"Dennis\"   \n\n\n\n\nSelecting edges\nEdges can be selected based on attributes just like vertices. As mentioned above, the standard way to get edges is E. Moreover, there are a few special structural properties for selecting edges.\nUsing .from allows you to filter the edge sequence based on the source vertices of the edges. E.g., to select all the edges originating from Carmina (who has vertex index 3):\n\n\nCode\nE(g)[.from(3)]\n\n\n+ 4/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nOf course it also works with vertex names:\n\n\nCode\nE(g)[.from(\"Carmina\")]\n\n\n+ 4/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Carmina Carmina  --Frank   Carmina  --Dennis  Carmina  --Esther \n\n\nUsing .to filters edge sequences based on the target vertices. This is different from .from if the graph is directed, while it gives the same answer for undirected graphs. Using .inc selects only those edges that are incident on a single vertex or at least one of the vertices, irrespectively of the edge directions.\nThe %--% operator can be used to select edges between specific groups of vertices, ignoring edge directions in directed graphs. For instance, the following expression selects all the edges between Carmina (vertex index 3), Dennis (vertex index 5) and Esther (vertex index 6):\n\n\nCode\nE(g) [ 3:5 %--% 5:6 ]\n\n\n+ 3/9 edges from 2d5397d (vertex names):\n[1] Carmina--Dennis Carmina--Esther Dennis --Esther\n\n\nTo make the %--% operator work with names, you can build string vectors containing the names and then use these vectors as operands. For instance, to select all the edges that connect men to women, we can do the following after re-adding the gender attribute that we deleted earlier:\n\n\nCode\nV(g)$gender &lt;- c(\"f\", \"m\", \"f\", \"m\", \"m\", \"f\", \"m\")\n\n\n\n\nCode\nmen &lt;- V(g)[gender == \"m\"]$name\nmen\n\n\n[1] \"Bruno\"  \"Frank\"  \"Dennis\" \"George\"\n\n\n\n\nCode\nwomen &lt;- V(g)[gender == \"f\"]$name\nwomen\n\n\n[1] \"Alejandra\" \"Carmina\"   \"Esther\"   \n\n\n\n\nCode\nE(g)[men %--% women]\n\n\n+ 5/9 edges from 2d5397d (vertex names):\n[1] Alejandra--Bruno  Alejandra--Frank  Carmina  --Frank  Carmina  --Dennis\n[5] Dennis   --Esther"
  },
  {
    "objectID": "posts/assignment_network data/index.html#treating-a-graph-as-an-adjacency-matrix",
    "href": "posts/assignment_network data/index.html#treating-a-graph-as-an-adjacency-matrix",
    "title": "Practice with Network Data",
    "section": "Treating a graph as an adjacency matrix",
    "text": "Treating a graph as an adjacency matrix\nThe adjacency matrix is another way to represent a graph. In an adjacency matrix, rows and columns are labeled by graph vertices, and the elements of the matrix indicate the number of edges between vertices i and j. The adjacency matrix for the example graph is:\n\n\nCode\nget.adjacency(g)\n\n\nWarning: `get.adjacency()` was deprecated in igraph 2.0.0.\nℹ Please use `as_adjacency_matrix()` instead.\n\n\n7 x 7 sparse Matrix of class \"dgCMatrix\"\n          Alejandra Bruno Carmina Frank Dennis Esther George\nAlejandra         .     1       1     1      .      .      .\nBruno             1     .       .     .      .      .      .\nCarmina           1     .       .     1      1      1      .\nFrank             1     .       1     .      .      .      1\nDennis            .     .       1     .      .      1      1\nEsther            .     .       1     .      1      .      .\nGeorge            .     .       .     1      1      .      .\n\n\nFor example, Carmina (1, 0, 0, 1, 1, 1, 0) is directly connected to Alejandra (who has vertex index 1), Frank (index 4), Dennis (index 5) and Esther (index 6), but not to Bruno (index 2) or to George (index 7)."
  },
  {
    "objectID": "posts/assignment_network data/index.html#layouts-and-plotting",
    "href": "posts/assignment_network data/index.html#layouts-and-plotting",
    "title": "Practice with Network Data",
    "section": "Layouts and plotting",
    "text": "Layouts and plotting\nA graph is an abstract mathematical object without a specific representation in 2D, 3D or any other geometric space. This means that whenever we want to visualise a graph, we have to find a mapping from vertices to coordinates in two- or three-dimensional space first, preferably in a way that is useful and/or pleasing for the eye. A separate branch of graph theory, namely graph drawing, tries to solve this problem via several graph layout algorithms. igraph implements quite a few layout algorithms and is also able to draw them onto the screen or to any output format that R itself supports.\n\nLayout algorithms\nThe layout functions in igraph always start with layout. The following table summarises them:\n\n\n\n\n\n\n\nMethod name\nAlgorithm description\n\n\n\n\nlayout_randomly\nPlaces the vertices completely randomly\n\n\nlayout_in_circle\nDeterministic layout that places the vertices on a circle\n\n\nlayout_on_sphere\nDeterministic layout that places the vertices evenly on the surface of a sphere\n\n\nlayout_with_drl\nThe Drl (Distributed Recursive Layout) algorithm for large graphs\n\n\nlayout_with_fr\nFruchterman-Reingold force-directed algorithm\n\n\nlayout_with_kk\nKamada-Kawai force-directed algorithm\n\n\nlayout_with_lgl\nThe LGL (Large Graph Layout) algorithm for large graphs\n\n\nlayout_as_tree\nReingold-Tilford tree layout, useful for (almost) tree-like graphs\n\n\nlayout_nicely\nLayout algorithm that automatically picks one of the other algorithms based on certain properties of the graph\n\n\n\nLayout algorithms can be called directly with a graph as its first argument. They will return a matrix with two columns and as many rows as the number of vertices in the graph; each row will correspond to the position of a single vertex, ordered by vertex IDs. Some algorithms have a 3D variant; in this case they return three columns instead of 2.\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\nSome layout algorithms take additional arguments; e.g., when laying out a graph as a tree, it might make sense to specify which vertex is to be placed at the root of the layout:\n\n\nCode\nlayout &lt;- layout_as_tree(g, root = 2)\n\n\n\n\nDrawing a graph using a layout\nWe can plot our imaginary social network with the Kamada-Kawai layout algorithm as follows:\n\n\nCode\nlayout &lt;- layout_with_kk(g)\n\n\n\n\nCode\nplot(g, layout = layout, main = \"Social network with the Kamada-Kawai layout algorithm\")\n\n\n\n\n\nThis should open a new window showing a visual representation of the network. Remember that the exact placement of nodes may be different on your machine since the layout is not deterministic.\nThe layout argument also accepts functions; in this case, the function will be called with the graph as its first argument. This makes it possible to just pass the name of a layout function directly, without creating a layout variable:\n\n\nCode\nplot(g, layout = layout_with_fr,\n     main = \"Social network with the Fruchterman-Reingold layout algorithm\")\n\n\n\n\n\nTo improve the visuals, a trivial addition would be to color the vertices according to the gender. We should also try to place the labels slightly outside the vertices to improve readability:\n\n\nCode\nV(g)$color &lt;- ifelse(V(g)$gender == \"m\", \"yellow\", \"red\")\nplot(g, layout = layout, vertex.label.dist = 3.5,\n     main = \"Social network - with genders as colors\")\n\n\n\n\n\nYou can also treat the gender attribute as a factor and provide the colors with an argument to plot(), which takes precedence over the color vertex attribute. Colors will be assigned automatically to levels of a factor:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.color=as.factor(V(g)$gender))\n\n\n\n\n\nAs seen above with the vertex.color argument, you can specify visual properties as arguments to plot instead of using vertex or edge attributes. The following plot shows the formal ties with thick lines while informal ones with thin lines:\n\n\nCode\nplot(g, layout=layout, vertex.label.dist=3.5, vertex.size=20,\n     vertex.color=ifelse(V(g)$gender == \"m\", \"yellow\", \"red\"),\n     edge.width=ifelse(E(g)$is_formal, 5, 1))\n\n\n\n\n\nThis latter approach is preferred if you want to keep the properties of the visual representation of your graph separate from the graph itself.\nIn summary, there are special vertex and edge properties that correspond to the visual representation of the graph. These attributes override the default settings of igraph (i.e color, weight, name, shape,layout,etc.). The following two tables summarise the most frequently used visual attributes for vertices and edges, respectively:\n\n\nVertex attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nvertex.color\nColor of the vertex\n\n\nlabel\nvertex.label\nLabel of the vertex. They will be converted to character. Specify NA to omit vertex labels. The default vertex labels are the vertex ids.\n\n\nlabel.cex\nvertex.label.cex\nFont size of the vertex label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nvertex.label.color\nColor of the vertex label\n\n\nlabel.degree\nvertex.label.degree\nIt defines the position of the vertex labels, relative to the center of the vertices. It is interpreted as an angle in radian, zero means ‘to the right’, and ‘pi’ means to the left, up is -pi/2 and down is pi/2. The default value is -pi/4\n\n\nlabel.dist\nvertex.label.dist\nDistance of the vertex label from the vertex itself, relative to the vertex size\n\n\nlabel.family\nvertex.label.family\nFont family of the vertex, similarly to R’s text function\n\n\nlabel.font\nvertex.label.font\nFont within the font family of the vertex, similarly to R’s text function\n\n\nshape\nvertex.shape\nThe shape of the vertex, currently “circle”, “square”, “csquare”, “rectangle”, “crectangle”, “vrectangle”, “pie” (see vertex.shape.pie), ‘sphere’, and “none” are supported, and only by the plot.igraph command.\n\n\nsize\nvertex.size\nThe size of the vertex, a numeric scalar or vector, in the latter case each vertex sizes may differ\n\n\n\n\n\nEdge attributes controlling graph plots\n\n\n\n\n\n\n\n\nAttribute name\nKeyword argument\nPurpose\n\n\n\n\ncolor\nedge.color\nColor of the edge\n\n\ncurved\nedge.curved\nA numeric value specifies the curvature of the edge; zero curvature means straight edges, negative values means the edge bends clockwise, positive values the opposite. TRUE means curvature 0.5, FALSE means curvature zero\n\n\narrow.size\nedge.arrow.size\nCurrently this is a constant, so it is the same for every edge. If a vector is submitted then only the first element is used, ie. if this is taken from an edge attribute then only the attribute of the first edge is used for all arrows.\n\n\narrow.width\nedge.arrow.width\nThe width of the arrows. Currently this is a constant, so it is the same for every edge\n\n\nwidth\nedge.width\nWidth of the edge in pixels\n\n\nlabel\nedge.label\nIf specified, it adds a label to the edge.\n\n\nlabel.cex\nedge.label.cex\nFont size of the edge label, interpreted as a multiplicative factor, similarly to R’s text function\n\n\nlabel.color\nedge.label.color\nColor of the edge label\n\n\nlabel.family\nedge.label.family\nFont family of the edge, similarly to R’s text function\n\n\nlabel.font\nedge.label.font\nFont within the font family of the edge, similarly to R’s text function\n\n\n\n\n\nGeneric arguments of plot()\nThese settings can be specified as arguments to the plot function to control the overall appearance of the plot.\n\n\n\n\n\n\n\nKeyword argument\nPurpose\n\n\n\n\nlayout\nThe layout to be used. It can be an instance of Layout, a list of tuples containing X-Y coordinates, or the name of a layout algorithm. The default is auto, which selects a layout algorithm automatically based on the size and connectedness of the graph.\n\n\nmargin\nThe amount of empty space below, over, at the left and right of the plot, it is a numeric vector of length four."
  },
  {
    "objectID": "posts/assignment_network data/index.html#assignment",
    "href": "posts/assignment_network data/index.html#assignment",
    "title": "Practice with Network Data",
    "section": "ASSIGNMENT",
    "text": "ASSIGNMENT\nImprove the network above by:\n\nColoring the edges according to Advisor / BCB520 attribute.\nColoring the nodes according to Department.\nAdjusting the labels to improve readability.\nFind the best layout you can for this garbage. What a nightmare."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Robyn’s Portfolio",
    "section": "",
    "text": "BCB 520 - Final Portfolio Post\n\n\nA Presentation About Something…\n\n\n\n\nassignment\n\n\n\n\nIn Progress…\n\n\n\n\n\n\nApr 26, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nPractice with Network Data\n\n\nNodes and Links and edges and vertices…\n\n\n\n\nPortfolio\n\n\nDataViz\n\n\nNetwork\n\n\niGraph\n\n\nassignment\n\n\nreference\n\n\n\n\niGRAPH!\n\n\n\n\n\n\nApr 4, 2024\n\n\nBarrie Robison\n\n\n\n\n\n\n  \n\n\n\n\nBCB 520 - Midterm Portfolio Post\n\n\nComparing University of Idaho grants to similar schools\n\n\n\n\nassignment\n\n\n\n\nIn Progress…\n\n\n\n\n\n\nMar 14, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nThe Top 100 Young Adult Books\n\n\nSome Examples\n\n\n\n\nother\n\n\nnotes\n\n\n\n\nExamining the Data in the File\n\n\n\n\n\n\nFeb 18, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 4\n\n\nMarks and Channels\n\n\n\n\nassignment\n\n\n\n\nIn progress…\n\n\n\n\n\n\nFeb 11, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nAssignment 2\n\n\nDescribing Data\n\n\n\n\nassignment\n\n\n\n\nGoodreads Rating Data.\n\n\n\n\n\n\nFeb 10, 2024\n\n\nRobyn Steveley\n\n\n\n\n\n\n  \n\n\n\n\nNotes\n\n\n\n\n\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nRobyn Stevley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/assignment 5/index.html",
    "href": "posts/assignment 5/index.html",
    "title": "ASSIGNMENT 5",
    "section": "",
    "text": "In this assignment, we are going to practice creating visualizations for tabular data. Unlike previous assignments, however, this time we will all be using the same data sets. I’m doing this because I want everyone to engage in the same logic process and have the same design objectives in mind."
  },
  {
    "objectID": "posts/assignment 5/index.html#overview",
    "href": "posts/assignment 5/index.html#overview",
    "title": "ASSIGNMENT 5",
    "section": "",
    "text": "In this assignment, we are going to practice creating visualizations for tabular data. Unlike previous assignments, however, this time we will all be using the same data sets. I’m doing this because I want everyone to engage in the same logic process and have the same design objectives in mind."
  },
  {
    "objectID": "posts/assignment 5/index.html#learning-objectives",
    "href": "posts/assignment 5/index.html#learning-objectives",
    "title": "ASSIGNMENT 5",
    "section": "LEARNING OBJECTIVES",
    "text": "LEARNING OBJECTIVES\n\nDemonstrate that you can manipulate tabular data to facilitate different visualization tasks. The minimum skills are FILTERING, SELECTING, and SUMMARIZING, all while GROUPING these operations as dictated by your data.\nDemonstrate that you can use tabular data to explore, analyze, and choose the most appropriate visualization idioms given a specific motivating question.\nDemonstrate that you can Find, Access, and Integrate additional data in order to fully address the motivating question.\n\nThe scenario below will allow you to complete the assignment. It deals with data that are of the appropriate complexity and extent (number of observations and variables) to challenge you. If you want to use different data (yours or from another source) I am happy to work with you to make that happen!"
  },
  {
    "objectID": "posts/assignment 5/index.html#scenario",
    "href": "posts/assignment 5/index.html#scenario",
    "title": "ASSIGNMENT 5",
    "section": "SCENARIO",
    "text": "SCENARIO\nImagine you are a high priced data science consultant. One of your good friends, Cassandra Canuck, is an Assistant General Manager for the Vancouver Canucks, a team in the National Hockey League with a long, long…. long history of futility.\nThis season feels different.\nThe Canucks are currently among the league leaders and appear to be on their way to their first playoff appearance in many years. A few weeks ago, the Vancouver Canucks decided to trade an underperforming player with a high upside and their first round draft pick to the Calgary Flames for Elias Lindholm, a very solid forward that might prove to be the missing piece of their Stanley Cup puzzle. Exciting!\nExcept that now the Canucks are struggling. They’ve lost 4 straight games and have seemingly lost their identity as a team. The fans are questioning whether the trade was worth it. Woe is me!\nFor the purposes of this exercise, let’s set the 2024 NHL draft order using the Tankathon Simulator. The NHL uses a lottery system in which the teams lowest in the standings have the highest odds of getting the first overall pick. This year the Canucks are at the top of the league, and positioned to have the 31st overall pick. According to the simulator, Calgary will pick at number 2 (which is very valuable!), and the Canuck’s pick at 31.\nHere is a screenshot:\n\n\nHere is the question:\nWas the trade worth it? This trade has a high likelihood of becoming what we call a rental. Elias Lindholm is on an expiring contract, meaning Vancouver is guaranteed to hold his contract only through the end of the season. They might be able to extend him, but that depends on the salary cap.\nMeanwhile, Calgary can draft a player at position 31, who may or may not turn out to be of equal or greater value than Lindholm.\nWas the trade worth it? Did Vancouver or Calgary “win” the trade?\nCan we make some visualizations that help us answer this question?"
  },
  {
    "objectID": "posts/assignment 5/index.html#directions",
    "href": "posts/assignment 5/index.html#directions",
    "title": "ASSIGNMENT 5",
    "section": "DIRECTIONS",
    "text": "DIRECTIONS\nCreate a new post in your portfolio for this assignment. Call it something cool, like NHL draft analysis, or Hockey Analytics, or John Wick….\nCopy the data files from the repository, and maybe also the .qmd file.\nUse the .qmd file as the backbone of your assignment, changing the code and the markdown text as you go."
  },
  {
    "objectID": "posts/assignment 5/index.html#the-data",
    "href": "posts/assignment 5/index.html#the-data",
    "title": "ASSIGNMENT 5",
    "section": "THE DATA",
    "text": "THE DATA\nHow can we evaluate whether trading a first round pick for a rental player is a good idea? One approach is to look at the historical performance of players from various draft positions.\nI’ve created a data set that will allow us to explore player performance as a function of draft position. If you are curious as to how I obtained and re-arranged these data, you can check out that tutorial here. For this assignment, though, I want to focus on the visualizations.\n\n\nCode\nNHLDraft&lt;-read.csv(\"NHLdraft.csv\")\nNHLDictionary&lt;-read_excel(\"NHLDictionary.xlsx\")\n\nknitr::kable(NHLDictionary)\n\n\n\n\n\n\n\n\n\n\nAttribute\nType\nDescription\n\n\n\n\ndraftyear\nOrdinal\nCalendar year in which the player was drafted into the NHL.\n\n\nname\nItem\nFull name of the player.\n\n\nround\nOrdinal\nRound in which the player was drafted (1 to 7).\n\n\noverall\nOrdinal\nOverall draft position of the player (1 to 224)\n\n\npickinRound\nOrdinal\nPosition in which the player was drafted in their round (1 to 32).\n\n\nheight\nQuantitative\nPlayer height in inches.\n\n\nweight\nQuantitative\nPlayer weight in pounds.\n\n\nposition\nCategorical\nPlayer position (Forward, Defense, Goaltender)\n\n\nplayerId\nItem\nUnique ID (key) assigned to each player.\n\n\npostdraft\nOrdinal\nNumber of seasons since being drafted (0 to 20).\n\n\nNHLgames\nQuantitative\nNumber of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more).\n\n\n\n\n\nIn this case, we have a dataframe with all the drafted players from 2000-2018, their position, their draft year and position, and then rows for each season since being drafted (postdraft). The key variable here is NHLgames, which tells us how many games they played in the NHL each season since being drafted. Whether drafted players even make the NHL, and how many games they play, might be a good proxy to understand the value of a draft pick we just traded away."
  },
  {
    "objectID": "posts/assignment 5/index.html#simple-scatterplot",
    "href": "posts/assignment 5/index.html#simple-scatterplot",
    "title": "ASSIGNMENT 5",
    "section": "SIMPLE SCATTERPLOT",
    "text": "SIMPLE SCATTERPLOT\nOne thing to realize about professional hockey is that it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA for a bit to further develop.\nLet’s use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\n\nCode\ndraft2022&lt;-NHLDraft%&gt;%\n  filter(draftyear==2022 & postdraft==0)\n\nggplot(draft2022, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\nAs you can see, the players drafted in June of 2022 didn’t play much last season. There are few things wrong with this visualization, however:\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you think of a way that adding extra channels might help?\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualizaiton is intended to facilitate, as well as the marks, channels, and key-value pairs used.\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?"
  },
  {
    "objectID": "posts/assignment 5/index.html#expanded-scatterplot",
    "href": "posts/assignment 5/index.html#expanded-scatterplot",
    "title": "ASSIGNMENT 5",
    "section": "EXPANDED SCATTERPLOT",
    "text": "EXPANDED SCATTERPLOT\nThe data from the most recent drafts aren’t really helpful for our question. Let’s go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\n\nCode\ndraft2018&lt;-NHLDraft%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n# wondering why I've filtered postdraft to be less than 6?  Try removing that filter to see what happens.\n\nggplot(draft2018, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\n\nHmmm… in addition to the problem of overplotting, we’ve got an additional issue here. We actually have two keys and one attribute. The attribute is NHLgames, and the keys are round and postdraft, but we are only using round.\nPostdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\nFor example, let’s say we just wanted to know the TOTAL number of NHL games played since being drafted.\n\n\nCode\ndrafttot2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()\n\n\n\n\n\nLook closely at the two graphs above. How are they different?"
  },
  {
    "objectID": "posts/assignment 5/index.html#stop-and-reflect",
    "href": "posts/assignment 5/index.html#stop-and-reflect",
    "title": "ASSIGNMENT 5",
    "section": "STOP AND REFLECT",
    "text": "STOP AND REFLECT\nI’ve been a bit sneaky up to this point. You’ve probably been focusing primarily on my (crappy) visualizations. That’s fine, but let’s think about the manipulations to the TABULAR DATA I’ve had to perform.\nI’m using the Tidyverse to do these manipulations. I set up the original data frame to conform to the tidy data principles (every column is a variable, every row is an observation), which is pretty much the base form of how we’ve discussed Tabular Data in class.\nI’ve snuck in some functions that have allowed me to FILTER, GROUP, and SUMMARIZE the data, often creating new dataframes as I do so. Hey, look! A handy cheatsheet for data transformation using the tidyverse!\nThese functions come from the dplyr package that gets installed as part of the tidyverse. The basic categories of actions are:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\narrange() changes the ordering of the rows.\n\nAll of these work with group_by() so you can perform whichever operation on the groups that might be present in your data set.\nLet’s get back to improving our understanding of the relative value of NHL draft picks. The figure above considers a single draft class (2018), and shows the total number of NHL games all the players have accumulated, separating each draft round on an ordinal x axis.\nFine, I guess, but we still have to deal with overplotting, and think about whether a scatterplot really helps us accomplish our task. For this figure do the following:\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you you think of a way that adding extra channels might help?\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualizaiton is intended to facilitate, as well as the marks, channels, and key-value pairs used.\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?"
  },
  {
    "objectID": "posts/assignment 5/index.html#scatterplot-with-overall-draft-position",
    "href": "posts/assignment 5/index.html#scatterplot-with-overall-draft-position",
    "title": "ASSIGNMENT 5",
    "section": "SCATTERPLOT WITH OVERALL DRAFT POSITION",
    "text": "SCATTERPLOT WITH OVERALL DRAFT POSITION\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player’s overall draft position instead? It also might help us focus on our motivating question! What is the potential value of pick 31, and how does Elias Lindholm compare to that value?\n\n\nCode\nggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_point()\n\n\n\n\n\nFor this figure, address the following:\n\nWe are trying to address the notion of trading pick 31. How might you facilitate the task of evaluating picks in that range?\nCreate a caption and better axis labels for this figure.\nWhat if we wanted to use more than just the 2018 draft class?"
  },
  {
    "objectID": "posts/assignment 5/index.html#scatterplot-summary",
    "href": "posts/assignment 5/index.html#scatterplot-summary",
    "title": "ASSIGNMENT 5",
    "section": "SCATTERPLOT SUMMARY",
    "text": "SCATTERPLOT SUMMARY\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We’ll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\n\nCode\nggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()+\n  geom_smooth()\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nAdding the smoothed line doesn’t eliminate the overplotting problem, but it does indicate that it exists. We’ll cover other potential solutions (such as box plots and violin plots) to this issue later in the course, when we get to the notions of faceting and data reduction.\nWhy not include all the data? A scatter plot with that many players (4775) isn’t going to be great. But we could plot some sort of polynomial model to get a sense of the relationship between draft position and NHL games. We’ll filter to the first 8 years of their career.\n\n\nCode\ndrafttot&lt;- NHLDraft%&gt;%\n  filter(postdraft&lt;8)%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\n\nCode\nggplot(drafttot, aes(x=overall, y=totgames))+\n  geom_smooth()\n\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nOr we could visualize the average number of games played as a function of time since being drafted.\n\n\nCode\nggplot(NHLDraft, aes(x=postdraft, y=NHLgames))+\n  geom_smooth(aes(color=as.factor(round)))\n\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "posts/assignment 5/index.html#divergence",
    "href": "posts/assignment 5/index.html#divergence",
    "title": "ASSIGNMENT 5",
    "section": "DIVERGENCE",
    "text": "DIVERGENCE\nEnough esoteric wandering. The original version of this assignment focused on the relative value of draft picks in the NHL. This version has a more specific question. What might picks in the range of pick 31 conceivably yield? How often do picks in that range yield players of Elias Lindholm’s value?\nI guess we’d better figure out what Elias Lindholm brings to the table.\nCan you find him in our existing data? Can you think of a way to highlight him in the context of number of games played? What other kinds of data might we need to fairly evaluate Lindholm and pick 31?\nYou will be surprised how these seemingly simple questions force you to explore the nuances of working with and visualizing tabular data."
  },
  {
    "objectID": "posts/assignment 5/index.html#simple-bar-chart",
    "href": "posts/assignment 5/index.html#simple-bar-chart",
    "title": "ASSIGNMENT 5",
    "section": "SIMPLE BAR CHART",
    "text": "SIMPLE BAR CHART\nOne of the best ways to deal with overplotting is to use our keys to SEPARATE and ORDER our data. Let’s do that now. I’ll stick with the summarized data for the 2018 draft year for now.\n\n\nCode\nggplot(drafttot2018, aes(x = name, y=totgames))+\n  geom_col()\n\n\n\n\n\nEpic. We now have a bar (column, really) chart with the key being player name, and the attribute being the total number of games played. We’ve SEPARATED the data using the spatial x-axis position channel, and aligned to that axis as well. But this visualization clearly sucks. You need to make it better by:\n\nAdding a visual channel indicating draft round.\nFixing the order of the x axis.\nMaking a caption and better axis labels.\nFixing the values of the x axis labels so they aren’t such a mess."
  },
  {
    "objectID": "posts/assignment 5/index.html#stacked-bar",
    "href": "posts/assignment 5/index.html#stacked-bar",
    "title": "ASSIGNMENT 5",
    "section": "STACKED BAR?",
    "text": "STACKED BAR?\nStacked bar charts use two keys and one value. Can we leverage this idiom? Perhaps if we used both round and postdraft as our keys and NHLgames as our value…\nThe idea here is that we might be able to get a sense of the temporal pattern of NHL games after a player is drafted. Do first round picks join the NHL earlier? Do they stay in the NHL longer? That kind of thing.\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(-round)))+\n  geom_col(position = \"stack\")\n\n\n\n\n\nCode\nNHLDraft &lt;-NHLDraft %&gt;%\n  mutate(descround = desc(as.factor(round)))\n\nrounds&lt;-c(\"darkred\",\"red\",\"pink\", \"violet\", \"lightblue\",\"blue\", \"darkblue\")\n\nggplot(NHLDraft, aes(x = postdraft, y=NHLgames, fill=as.factor(-round), \n                     alpha = as.factor(-round)))+\n  geom_col(position = \"stack\")+\n  theme(legend.position = \"none\")\n\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\nThis seems like it has some potential, but it definitely needs some work (by you):\n\nYou know the drill by now. Caption! Labels!\nImprove the color palette.\nDo we really only want data from the 2018 draft class?\nConsider the order of rounds within the stack (glyph). Which round is most important? Change the order within the glyphs to reflect this."
  },
  {
    "objectID": "posts/assignment 5/index.html#pie-charts-normalized-bar-charts",
    "href": "posts/assignment 5/index.html#pie-charts-normalized-bar-charts",
    "title": "ASSIGNMENT 5",
    "section": "PIE CHARTS / NORMALIZED BAR CHARTS",
    "text": "PIE CHARTS / NORMALIZED BAR CHARTS\nWe all know that Pie Charts are rarely a good choice, but let’s look at how to make one here. I’ll eliminate all the players drafted in 2018 who never played an NHL game, leaving us 80 players drafted in that year who made “THE SHOW”. Let’s look at how those 80 players were drafted:\n\n\nCode\nplayedNHL2018 &lt;- drafttot2018%&gt;%\n  filter(totgames&gt;0)\n\nggplot(playedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")\n\n\n\n\n\nObviously this isn’t great, but can you state why? Write a little critique of this visualizaiton that:\n\nConsiders a player who played hundreds of games over their first five years vs a player who played one game in five years.\nEvaluates the relative value of a second round pick and a third round pick.\n\nNow let’s change this to account for the various years post draft:\n\n\nCode\nseasonplayedNHL2018 &lt;- draft2018%&gt;%\n  filter(NHLgames&gt;0)\n\n\nggplot(seasonplayedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")+\n  facet_wrap(~postdraft)\n\n\n\n\n\nSeems like there is something to work with here, but let’s compare this to a normalized bar chart:\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"fill\")\n\n\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n\n\n\n\n\nCode\nggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=overall))+\n  geom_col(position = \"fill\")\n\n\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n\n\n\n\n\nCan you work with this to make it a useful visualization for your friend, Cassandra Canuck?"
  },
  {
    "objectID": "posts/assignment 5/index.html#heatmap",
    "href": "posts/assignment 5/index.html#heatmap",
    "title": "ASSIGNMENT 5",
    "section": "HEATMAP?",
    "text": "HEATMAP?\nCould this be useful?\n\n\nCode\nround1&lt;-NHLDraft%&gt;%\n  filter(round==1)\n\nggplot(NHLDraft, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +\n  geom_tile(width = .5, height = 5) +\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\"),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())+\n  scale_fill_gradient(low = \"blue\", high = \"red\")\n\n\n\n\n\nCode\nggplot(NHLDraft, aes(y = overall, x = postdraft, z=NHLgames)) + \n  geom_tile(aes(fill=NHLgames))"
  },
  {
    "objectID": "posts/assignment 5/index.html#other-stuff-to-consider",
    "href": "posts/assignment 5/index.html#other-stuff-to-consider",
    "title": "ASSIGNMENT 5",
    "section": "OTHER STUFF TO CONSIDER",
    "text": "OTHER STUFF TO CONSIDER\n\nDo these visualizations change as a function of player position?\nIs the number of NHL games played really the best metric to use?"
  },
  {
    "objectID": "posts/assignment 5/index.html#conclusion",
    "href": "posts/assignment 5/index.html#conclusion",
    "title": "ASSIGNMENT 5",
    "section": "CONCLUSION",
    "text": "CONCLUSION\nBased on your visualizations, what would you advise regarding this trade proposal? Why?"
  },
  {
    "objectID": "posts/assignment 4 _marks and channels/assignment 4.html",
    "href": "posts/assignment 4 _marks and channels/assignment 4.html",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\nThe Data sets being used:\nTop 100 Young Adult Books\n52,000 Animated Movies\n\n\nCode\nBOOKS &lt;- read.csv(\"goodreads_Top100_YoungAdultFiction1.csv\")\nMOVIES &lt;- read.csv(\"Animation_Movies.csv\")\n\n\n\n\nFigure 1\n\n\nCode\n# a graph that shows the relationship between ordered data clearly and does not imply an ordering where there is none.\n\n\nFigure 2\n\n\nCode\n# a graph that messes up the relationship between ordered data and unordered data. The relationship of the order is confusing and possibly relationship are implied that don't exist.\n\n\n\n\n\n\n\nCode\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)\n\n\n\n\n\n\n\n\nFigure 5\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while maintaining separability.\nMOVIES_3 &lt;- MOVIES %&gt;%\n  filter(grepl(\"Pixar\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\n#filter these down to something interesting. only a couple of movies or only movies from a certain genre or country\n\nggplot(MOVIES_3, aes(x = reorder(title, +budget), y = runtime, fill = budget)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Pixar Movies\",\n       x = \"Movies\",\n       y = \"Runtime (minutes)\") +\n  geom_text(aes(label =  budget/1e6), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"grey\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))\n\n\n\n\n\nFigure 6\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while and confuses separability.\n\nggplot(MOVIES_3, aes(x = title, y = runtime, fill = budget)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Pixar Movies\",\n       x = \"Movies\",\n       y = \"runtime\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        plot.title = element_text(hjust = 0.1))\n\n\n\n\n\n\n\n\nFigure 7\n\n\nCode\n# a graph where popout is used\n\n\nFigure 8\n\n\nCode\n# a graph where popout is not used"
  },
  {
    "objectID": "posts/assignment 4 _marks and channels/assignment 4.html#expressiveness-and-effectiveness",
    "href": "posts/assignment 4 _marks and channels/assignment 4.html#expressiveness-and-effectiveness",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 1\n\n\nCode\n# a graph that shows the relationship between ordered data clearly and does not imply an ordering where there is none.\n\n\nFigure 2\n\n\nCode\n# a graph that messes up the relationship between ordered data and unordered data. The relationship of the order is confusing and possibly relationship are implied that don't exist."
  },
  {
    "objectID": "posts/assignment 4 _marks and channels/assignment 4.html#discriminability",
    "href": "posts/assignment 4 _marks and channels/assignment 4.html#discriminability",
    "title": "Assignment 4",
    "section": "",
    "text": "Code\n#fig 3\nfig_3 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = 20, color=\"blue\", fill=\"blue\")\n\n#Style\nfig_3_titles &lt;- labs(title = \"Figure 1: Number of Pages for Top 100 Young Adult Books\", \n                     caption = \"This graph shows the number of pages of the most popular young adult books to within 20 pages.\")\nfig_3_theme &lt;- theme(panel.background=element_rect(fill=\"white\"), \n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_3 &lt;- fig_3 + fig_3_titles + fig_3_theme\n\nprint(fig_3)\n\n\n\n\n\n\n\nCode\n#fig 4\nfig_4 &lt;- ggplot(BOOKS, aes(pages))+ geom_histogram(binwidth = .5, color=\"red\", fill=\"red\")\n\n#Style\nfig_4_titles &lt;- labs(title = \"Figure 2: Number of Pages for Top 100 Young Adults Books\", \n                     caption = \"This uses bin sizes of half a page. The data doesn't even measure book length to half pages.\")\nfig_4_theme &lt;- theme(panel.background=element_rect(fill=\"white\"),\n                     plot.caption = element_text(hjust = 0.5))\n\n#Showing figure 4\nfig_4 &lt;- fig_4 + fig_4_titles + fig_4_theme\n\nprint(fig_4)"
  },
  {
    "objectID": "posts/assignment 4 _marks and channels/assignment 4.html#separability",
    "href": "posts/assignment 4 _marks and channels/assignment 4.html#separability",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 5\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while maintaining separability.\nMOVIES_3 &lt;- MOVIES %&gt;%\n  filter(grepl(\"Pixar\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\n#filter these down to something interesting. only a couple of movies or only movies from a certain genre or country\n\nggplot(MOVIES_3, aes(x = reorder(title, +budget), y = runtime, fill = budget)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Pixar Movies\",\n       x = \"Movies\",\n       y = \"Runtime (minutes)\") +\n  geom_text(aes(label =  budget/1e6), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"grey\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))\n\n\n\n\n\nFigure 6\n\n\nCode\n# a graph that uses a two or more channels to encode two or more attributes while and confuses separability.\n\nggplot(MOVIES_3, aes(x = title, y = runtime, fill = budget)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Pixar Movies\",\n       x = \"Movies\",\n       y = \"runtime\") +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1),\n        plot.title = element_text(hjust = 0.1))"
  },
  {
    "objectID": "posts/assignment 4 _marks and channels/assignment 4.html#popout",
    "href": "posts/assignment 4 _marks and channels/assignment 4.html#popout",
    "title": "Assignment 4",
    "section": "",
    "text": "Figure 7\n\n\nCode\n# a graph where popout is used\n\n\nFigure 8\n\n\nCode\n# a graph where popout is not used"
  },
  {
    "objectID": "posts/assignment 6 _midterm/Midterm.html",
    "href": "posts/assignment 6 _midterm/Midterm.html",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "",
    "text": "This post compares the University of Idaho grant awards from the department of agriculture (USDA), the department of energy (DOE), the national institute of health (NIH), and the national science foundation (NSF) to other similar universities.\n\n\n\n\nCode\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(knitr)\n\n\nDepartment of Agriculture (USDA)\nThis is the data set from the USDA. link here:\n\n\nCode\n#USDA data (each school in different file)\n\n#reading in the data from the files\nUSDAdata_UI &lt;- read.csv(\"USDAtoUI.csv\")  #University of Idaho\nUSDAdata_BSU &lt;- read.csv(\"USDABSU.csv\")  #Boise State University\nUSDAdata_ISU &lt;- read.csv(\"USDAISU.csv\")  #Idaho State University\nUSDAdata_MSU &lt;- read.csv(\"USDAMSU.csv\")  #Montana State University\nUSDAdata_UM &lt;- read.csv(\"USDAUofM.csv\")  #University of Montana\nUSDAdata_WSU &lt;- read.csv(\"USDAWSU.csv\")  #Washington State University\n\n#combining all schools into one dataframe\nUSDAdata_all &lt;- rbind(USDAdata_UI, USDAdata_BSU, USDAdata_ISU, USDAdata_MSU, USDAdata_UM, USDAdata_WSU)\n\n#picking out the columns that might be useful\nUSDA_data_main &lt;- USDAdata_all %&gt;% select(Award.Date, Grant.Title, Grantee.Name, Award.Dollars, Program.Name, Program.Area.Name)\n\n#adding column: Source: USDA\nUSDA_data_main$Source &lt;- 'USDA'\n\n#convert dates to date objects\nUSDA_data_main$'Award.Date' &lt;- as.Date(USDA_data_main$'Award.Date', format = \"%Y-%m-%d\")\n\n#rename columns\ncolnames(USDA_data_main) &lt;- c('Award_Date', 'Grant_Title', 'Institution', 'Award_Amount', 'Program_Name', 'Program_Area_Name', 'Source')\n\n\n#show table\nknitr::kable(head(USDA_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAward_Date\nGrant_Title\nInstitution\nAward_Amount\nProgram_Name\nProgram_Area_Name\nSource\n\n\n\n\n2010-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n7495\nN/A\nN/A\nUSDA\n\n\n2009-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n6813\nN/A\nN/A\nUSDA\n\n\n2008-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n8524\nN/A\nN/A\nUSDA\n\n\n2003-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n1097\nN/A\nN/A\nUSDA\n\n\n\n\n\nDepartment of Energy (DOE)\n\n\nCode\n#DOE data (for all schools)\n\n#reading in data from file\nsuppressMessages(DOE_data &lt;- read_xlsx(\"DOEawards.xlsx\"))\n\n#vector so i can pick out out only relevant schools\nschools &lt;- c('Regents of the University of Idaho', 'University of Montana', 'Washington State University', 'Boise State University', 'Idaho State University', 'Montana State University')\n\n#picking out the columns that might be useful\nDOE_data_main &lt;- DOE_data %&gt;% \n  filter(Institution %in% schools) %&gt;%\n  select(Institution, PI, Status, 'Action Type', 'Start Date', 'End Date','Most Recent Award Date', 'Amount Awarded to Date', 'Amount Awarded this FY', 'Program Area')\n\n#add column: source: DOE\nDOE_data_main$Source &lt;- 'DOE'\n\n#convert dates to date objects\nDOE_data_main$'Start Date' &lt;- as.Date(DOE_data_main$'Start Date', format = \"%m/%d/%Y\")\nDOE_data_main$'End Date' &lt;- as.Date(DOE_data_main$'End Date', format = \"%m/%d/%Y\")\nDOE_data_main$'Most Recent Award Date' &lt;- as.Date(DOE_data_main$'Most Recent Award Date', format = \"%m/%d/%Y\")\n\n#rename columns\ncolnames(DOE_data_main) &lt;- c('Institution', 'PI', 'Status', 'Is_New', 'Start_Date', 'End_Date', 'Most_Recent_Award_Date', 'Amount_Awarded_to_Date', 'Amount_Awarded_this_FY', 'Program_Area_Name', 'Source')\n\n#show table\nknitr::kable(head(DOE_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstitution\nPI\nStatus\nIs_New\nStart_Date\nEnd_Date\nMost_Recent_Award_Date\nAmount_Awarded_to_Date\nAmount_Awarded_this_FY\nProgram_Area_Name\nSource\n\n\n\n\nWashington State University\nCheeke, Tanya\nActive\nNew\n2022-09-01\n2025-05-31\n2024-02-15\n149995\n0\nAtmospheric System Research\nDOE\n\n\nRegents of the University of Idaho\nSammarruca, Francesca\nActive\nRenewal\n2021-12-01\n2024-11-30\n2023-12-29\n1812000\n145000\nNuclear Theory\nDOE\n\n\nWashington State University\nLange, Bernd\nActive\nRenewal\n2023-08-15\n2026-08-14\n2023-09-25\n2995804\n0\nPhysical Biosciences\nDOE\n\n\nBoise State University\nXiong, Hui (Claire)\nActive\nNew\n2023-08-15\n2026-08-14\n2023-09-23\n599992\n0\nMaterials Chemistry\nDOE\n\n\n\n\n\nNational Institutes of Health (NIH)\n\n\nCode\n#NIH data (for all selected schools)\n#this was grabbed from NIH API and converted to file\n\n#reading the data from the file\nNIH_data &lt;- read_xlsx(\"NIH_data.xlsx\")\n\n#picking out columns that might be useful\nNIH_data_main &lt;- NIH_data %&gt;% select(fiscal_year, award_amount, is_active, contact_pi_name, project_start_date, project_end_date, is_new, project_title, agency_code, organization.org_name) %&gt;% mutate(across(where(is.logical), as.character))\n\n#rename columns\ncolnames(NIH_data_main) &lt;- c('Fiscal_Year', 'Award_Amount', 'Status', 'PI', 'Start_Date', 'End_Date', 'Is_New', 'Program_Name', 'Source', 'Institution')\n\n#convert dates to date objects\nNIH_data_main$'Start_Date' &lt;- as.Date(NIH_data_main$'Start_Date', format = \"%Y-%m-%dT%H:%M:%SZ\")\nNIH_data_main$'End_Date' &lt;- as.Date(NIH_data_main$'End_Date', format = \"%Y-%m-%dT%H:%M:%SZ\")\n\n\n\n#show table\nknitr::kable(head(NIH_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiscal_Year\nAward_Amount\nStatus\nPI\nStart_Date\nEnd_Date\nIs_New\nProgram_Name\nSource\nInstitution\n\n\n\n\n2024\n586559\nTRUE\nDEMELER, BORRIES\n2024-03-15\n2025-03-14\nFALSE\nAcquisition of a Beckman-Coulter Optima AUC Analytical Ultracentrifuge for the University of Montana\nNIH\nUNIVERSITY OF MONTANA\n\n\n2024\n2354626\nTRUE\nMCGUIRE, MICHELLE KAY\n2024-03-11\n2029-01-31\nFALSE\nCOBRE in Nutrition and Women’s Health\nNIH\nUNIVERSITY OF IDAHO\n\n\n2024\n461621\nTRUE\nWILLIAMS, JANET E.\n2024-03-11\n2029-01-31\nFALSE\nResearch Core\nNIH\nUNIVERSITY OF IDAHO\n\n\n2024\n162320\nTRUE\nCHEN, YIMIN\n2024-03-11\n2029-01-31\nFALSE\nResearch Project - RPL Chen\nNIH\nUNIVERSITY OF IDAHO\n\n\n\n\n\nNational Science Foundation (NSF)\n\n\nCode\n#NSF data (each school in different file)\n#this was grabbed from NSF API and converted to files\n\n#reading the files\nNSFdata_UI &lt;- read_xlsx(\"NSF_data.xlsx\")  #University of Idaho\nNSFdata_BSU &lt;- read_xlsx(\"NSFtoBSU.xlsx\") #Boise State University\nNSFdata_ISU &lt;- read_xlsx(\"NSFtoISU.xlsx\") #Idaho State University\nNSFdata_MSU &lt;- read_xlsx(\"NSFtoMSU.xlsx\") #Montana State University\nNSFdata_UM &lt;- read_xlsx(\"NSFtoUM.xlsx\")   #University of Montana\nNSFdata_WSU &lt;- read_xlsx(\"NSFtoWSU.xlsx\") #Washington State University\n\n#combining all schools into one dataframe\nNSFdata_all &lt;- rbind(NSFdata_UI, NSFdata_BSU, NSFdata_ISU, NSFdata_MSU, NSFdata_UM, NSFdata_WSU)\n\n#picking out columns that might be useful\nNSF_data_main &lt;- NSFdata_all %&gt;% select(agency, awardeeName, estimatedTotalAmt, fundsObligatedAmt, fundProgramName, pdPIName, startDate, expDate)\n\n#rename columns\ncolnames(NSF_data_main) &lt;- c('Source', 'Institution', 'Estimated_Total_Amount', 'Funds_Obligated', 'Program_Name', 'PI', 'Start_Date', 'End_Date')\n\n#convert dates to date objects\nNSF_data_main$'Start_Date' &lt;- as.Date(NSF_data_main$'Start_Date', format = \"%m/%d/%Y\")\nNSF_data_main$'End_Date' &lt;- as.Date(NSF_data_main$'End_Date', format = \"%m/%d/%Y\")\n\n\n#show table\nknitr::kable(head(NSF_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource\nInstitution\nEstimated_Total_Amount\nFunds_Obligated\nProgram_Name\nPI\nStart_Date\nEnd_Date\n\n\n\n\nNSF\nRegents of the University of Idaho\n628415.00\n628415\nCampus Cyberinfrastructure\nDaniel R Ewart\n2024-04-01\n2026-03-31\n\n\nNSF\nRegents of the University of Idaho\n456051.00\n302462\nUNDERGRADUATE PROGRAMS IN CHEM\nKristopher V Waynant\n2024-04-01\n2027-03-31\n\n\nNSF\nRegents of the University of Idaho\n1000000.00\n1000000\nNSF Engines - Type 1\nTara Hudiburg\n2024-03-01\n2025-08-31\n\n\nNSF\nRegents of the University of Idaho\n1179977.00\n546482\nDiscovery Research K-12\nJulie M Amador\n2023-12-01\n2027-11-30\n\n\n\n\n\nThe Combined Data\n\n\nCode\n#combining all the data sets together\ncombined_data &lt;- bind_rows(USDA_data_main, DOE_data_main, NIH_data_main, NSF_data_main)\n\n#show table\nknitr::kable(head(combined_data, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAward_Date\nGrant_Title\nInstitution\nAward_Amount\nProgram_Name\nProgram_Area_Name\nSource\nPI\nStatus\nIs_New\nStart_Date\nEnd_Date\nMost_Recent_Award_Date\nAmount_Awarded_to_Date\nAmount_Awarded_this_FY\nFiscal_Year\nEstimated_Total_Amount\nFunds_Obligated\n\n\n\n\n2010-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n7495\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2009-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n6813\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2008-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n8524\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2003-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n1097\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA"
  },
  {
    "objectID": "posts/assignment 6 _midterm/Midterm.html#question-2",
    "href": "posts/assignment 6 _midterm/Midterm.html#question-2",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Question 2",
    "text": "Question 2\nWhat is the proportional representation of new awards to the UI from these various sources over the past 5 to 10 years? Are there any trends that are encouraging or discouraging?\n\n\nCode\n#Trends over time\n\n# a graph showing the number of new awards from each source (or just awards in the case of USDA) vs time, with a different line for each source.\n# a graph showing the amount of money per new awards vs. time for each source.\n\n\n#Question_2_1 &lt;- \n#ggplot"
  },
  {
    "objectID": "posts/assignment 6 _midterm/Midterm.html#comparing-the-schools",
    "href": "posts/assignment 6 _midterm/Midterm.html#comparing-the-schools",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "Comparing the Schools",
    "text": "Comparing the Schools\n\n\nCode\n# a graph showing a comparison of awards (or award money) given to each school by source. so a clump showing the number of awards (or amount of money) from for example from the NSF for each school then another clump for NIH, etc. Color coded by school for visibility across clumps. Note: active awards only. For the USDA awards use date = 2024\n\n# need to organize data so that the different versions of the schools are all sorted together. so things are grouped based on if each school name is grouped together. I also may need to worry about dates in the different groups, although i do think i need to work with the dates in the above section convert dates \n\nsuppressMessages({\n\nQ3_1_1 &lt;- combined_data %&gt;%\n  filter(Source %in% c(\"NIH\", \"NSF\", \"USDA\", \"DOE\")) %&gt;%\n  #filter(by the date!!!!) %&gt;%\n  mutate(category = case_when(\n      grepl(\"University of Idaho\", Institution, ignore.case = TRUE) ~ \"University of Idaho\",\n      grepl(\"Boise State University\", Institution, ignore.case = TRUE) ~ \"Boise State University\",\n      grepl(\"Idaho State University\", Institution, ignore.case = TRUE) ~ \"Idaho State University\",\n      grepl(\"Montana State University\", Institution, ignore.case = TRUE) ~ \"Montana State University\",\n      grepl(\"University of Montana\", Institution, ignore.case = TRUE) ~ \"University of Montana\",\n      grepl(\"Washington State University\", Institution, ignore.case = TRUE) ~ \"Washington State University\",\n      #TRUE ~ \"Other\"\n      )\n  ) %&gt;%\n  group_by(category, Source) %&gt;%\n    summarise(awards_count = n())\n})\n\n\ninstitution_colors &lt;- c(\"University of Idaho\" = \"gold\", \"Boise State University\" = \"salmon\", \"Idaho State University\" = \"skyblue\", \"Montana State University\" = \"forestgreen\",  \"University of Montana\" = \"violet\",  \"Washington State University\" = \"brown\")\n\n\nggplot(Q3_1_1, aes(x = Source, y = awards_count, fill = category)) + \n  geom_bar(stat=\"identity\", position = \"dodge\") +\n  scale_fill_manual(values = institution_colors, name = \"Institution\") +\n  labs(title = \"Number of Awards Per School (Over All Dates)\",\n       x = \"\",\n       y = \"Number of Awards\") +\n    theme_minimal()\n\n\n\n\n\nFigure ?. Comparing the number of awards for each school across the whole data set\n\n\nCode\n#comparing the schools to each other\n\n# a graph comparing trends for each school (are any downturns coming for all the schools?). color coded and shape coded to clump schools, and sources. Colors for schools, shapes for sources, e.g. solid lines for NSF, rect dash for NIH, triangles dash for DOE, dots dash for USDA."
  },
  {
    "objectID": "posts/assignment 6 _midterm/Midterm.html#the-data",
    "href": "posts/assignment 6 _midterm/Midterm.html#the-data",
    "title": "BCB 520 - Midterm Portfolio Post",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(knitr)\n\n\nDepartment of Agriculture (USDA)\nThis is the data set from the USDA. link here:\n\n\nCode\n#USDA data (each school in different file)\n\n#reading in the data from the files\nUSDAdata_UI &lt;- read.csv(\"USDAtoUI.csv\")  #University of Idaho\nUSDAdata_BSU &lt;- read.csv(\"USDABSU.csv\")  #Boise State University\nUSDAdata_ISU &lt;- read.csv(\"USDAISU.csv\")  #Idaho State University\nUSDAdata_MSU &lt;- read.csv(\"USDAMSU.csv\")  #Montana State University\nUSDAdata_UM &lt;- read.csv(\"USDAUofM.csv\")  #University of Montana\nUSDAdata_WSU &lt;- read.csv(\"USDAWSU.csv\")  #Washington State University\n\n#combining all schools into one dataframe\nUSDAdata_all &lt;- rbind(USDAdata_UI, USDAdata_BSU, USDAdata_ISU, USDAdata_MSU, USDAdata_UM, USDAdata_WSU)\n\n#picking out the columns that might be useful\nUSDA_data_main &lt;- USDAdata_all %&gt;% select(Award.Date, Grant.Title, Grantee.Name, Award.Dollars, Program.Name, Program.Area.Name)\n\n#adding column: Source: USDA\nUSDA_data_main$Source &lt;- 'USDA'\n\n#convert dates to date objects\nUSDA_data_main$'Award.Date' &lt;- as.Date(USDA_data_main$'Award.Date', format = \"%Y-%m-%d\")\n\n#rename columns\ncolnames(USDA_data_main) &lt;- c('Award_Date', 'Grant_Title', 'Institution', 'Award_Amount', 'Program_Name', 'Program_Area_Name', 'Source')\n\n\n#show table\nknitr::kable(head(USDA_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAward_Date\nGrant_Title\nInstitution\nAward_Amount\nProgram_Name\nProgram_Area_Name\nSource\n\n\n\n\n2010-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n7495\nN/A\nN/A\nUSDA\n\n\n2009-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n6813\nN/A\nN/A\nUSDA\n\n\n2008-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n8524\nN/A\nN/A\nUSDA\n\n\n2003-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n1097\nN/A\nN/A\nUSDA\n\n\n\n\n\nDepartment of Energy (DOE)\n\n\nCode\n#DOE data (for all schools)\n\n#reading in data from file\nsuppressMessages(DOE_data &lt;- read_xlsx(\"DOEawards.xlsx\"))\n\n#vector so i can pick out out only relevant schools\nschools &lt;- c('Regents of the University of Idaho', 'University of Montana', 'Washington State University', 'Boise State University', 'Idaho State University', 'Montana State University')\n\n#picking out the columns that might be useful\nDOE_data_main &lt;- DOE_data %&gt;% \n  filter(Institution %in% schools) %&gt;%\n  select(Institution, PI, Status, 'Action Type', 'Start Date', 'End Date','Most Recent Award Date', 'Amount Awarded to Date', 'Amount Awarded this FY', 'Program Area')\n\n#add column: source: DOE\nDOE_data_main$Source &lt;- 'DOE'\n\n#convert dates to date objects\nDOE_data_main$'Start Date' &lt;- as.Date(DOE_data_main$'Start Date', format = \"%m/%d/%Y\")\nDOE_data_main$'End Date' &lt;- as.Date(DOE_data_main$'End Date', format = \"%m/%d/%Y\")\nDOE_data_main$'Most Recent Award Date' &lt;- as.Date(DOE_data_main$'Most Recent Award Date', format = \"%m/%d/%Y\")\n\n#rename columns\ncolnames(DOE_data_main) &lt;- c('Institution', 'PI', 'Status', 'Is_New', 'Start_Date', 'End_Date', 'Most_Recent_Award_Date', 'Amount_Awarded_to_Date', 'Amount_Awarded_this_FY', 'Program_Area_Name', 'Source')\n\n#show table\nknitr::kable(head(DOE_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstitution\nPI\nStatus\nIs_New\nStart_Date\nEnd_Date\nMost_Recent_Award_Date\nAmount_Awarded_to_Date\nAmount_Awarded_this_FY\nProgram_Area_Name\nSource\n\n\n\n\nWashington State University\nCheeke, Tanya\nActive\nNew\n2022-09-01\n2025-05-31\n2024-02-15\n149995\n0\nAtmospheric System Research\nDOE\n\n\nRegents of the University of Idaho\nSammarruca, Francesca\nActive\nRenewal\n2021-12-01\n2024-11-30\n2023-12-29\n1812000\n145000\nNuclear Theory\nDOE\n\n\nWashington State University\nLange, Bernd\nActive\nRenewal\n2023-08-15\n2026-08-14\n2023-09-25\n2995804\n0\nPhysical Biosciences\nDOE\n\n\nBoise State University\nXiong, Hui (Claire)\nActive\nNew\n2023-08-15\n2026-08-14\n2023-09-23\n599992\n0\nMaterials Chemistry\nDOE\n\n\n\n\n\nNational Institutes of Health (NIH)\n\n\nCode\n#NIH data (for all selected schools)\n#this was grabbed from NIH API and converted to file\n\n#reading the data from the file\nNIH_data &lt;- read_xlsx(\"NIH_data.xlsx\")\n\n#picking out columns that might be useful\nNIH_data_main &lt;- NIH_data %&gt;% select(fiscal_year, award_amount, is_active, contact_pi_name, project_start_date, project_end_date, is_new, project_title, agency_code, organization.org_name) %&gt;% mutate(across(where(is.logical), as.character))\n\n#rename columns\ncolnames(NIH_data_main) &lt;- c('Fiscal_Year', 'Award_Amount', 'Status', 'PI', 'Start_Date', 'End_Date', 'Is_New', 'Program_Name', 'Source', 'Institution')\n\n#convert dates to date objects\nNIH_data_main$'Start_Date' &lt;- as.Date(NIH_data_main$'Start_Date', format = \"%Y-%m-%dT%H:%M:%SZ\")\nNIH_data_main$'End_Date' &lt;- as.Date(NIH_data_main$'End_Date', format = \"%Y-%m-%dT%H:%M:%SZ\")\n\n\n\n#show table\nknitr::kable(head(NIH_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiscal_Year\nAward_Amount\nStatus\nPI\nStart_Date\nEnd_Date\nIs_New\nProgram_Name\nSource\nInstitution\n\n\n\n\n2024\n586559\nTRUE\nDEMELER, BORRIES\n2024-03-15\n2025-03-14\nFALSE\nAcquisition of a Beckman-Coulter Optima AUC Analytical Ultracentrifuge for the University of Montana\nNIH\nUNIVERSITY OF MONTANA\n\n\n2024\n2354626\nTRUE\nMCGUIRE, MICHELLE KAY\n2024-03-11\n2029-01-31\nFALSE\nCOBRE in Nutrition and Women’s Health\nNIH\nUNIVERSITY OF IDAHO\n\n\n2024\n461621\nTRUE\nWILLIAMS, JANET E.\n2024-03-11\n2029-01-31\nFALSE\nResearch Core\nNIH\nUNIVERSITY OF IDAHO\n\n\n2024\n162320\nTRUE\nCHEN, YIMIN\n2024-03-11\n2029-01-31\nFALSE\nResearch Project - RPL Chen\nNIH\nUNIVERSITY OF IDAHO\n\n\n\n\n\nNational Science Foundation (NSF)\n\n\nCode\n#NSF data (each school in different file)\n#this was grabbed from NSF API and converted to files\n\n#reading the files\nNSFdata_UI &lt;- read_xlsx(\"NSF_data.xlsx\")  #University of Idaho\nNSFdata_BSU &lt;- read_xlsx(\"NSFtoBSU.xlsx\") #Boise State University\nNSFdata_ISU &lt;- read_xlsx(\"NSFtoISU.xlsx\") #Idaho State University\nNSFdata_MSU &lt;- read_xlsx(\"NSFtoMSU.xlsx\") #Montana State University\nNSFdata_UM &lt;- read_xlsx(\"NSFtoUM.xlsx\")   #University of Montana\nNSFdata_WSU &lt;- read_xlsx(\"NSFtoWSU.xlsx\") #Washington State University\n\n#combining all schools into one dataframe\nNSFdata_all &lt;- rbind(NSFdata_UI, NSFdata_BSU, NSFdata_ISU, NSFdata_MSU, NSFdata_UM, NSFdata_WSU)\n\n#picking out columns that might be useful\nNSF_data_main &lt;- NSFdata_all %&gt;% select(agency, awardeeName, estimatedTotalAmt, fundsObligatedAmt, fundProgramName, pdPIName, startDate, expDate)\n\n#rename columns\ncolnames(NSF_data_main) &lt;- c('Source', 'Institution', 'Estimated_Total_Amount', 'Funds_Obligated', 'Program_Name', 'PI', 'Start_Date', 'End_Date')\n\n#convert dates to date objects\nNSF_data_main$'Start_Date' &lt;- as.Date(NSF_data_main$'Start_Date', format = \"%m/%d/%Y\")\nNSF_data_main$'End_Date' &lt;- as.Date(NSF_data_main$'End_Date', format = \"%m/%d/%Y\")\n\n\n#show table\nknitr::kable(head(NSF_data_main, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource\nInstitution\nEstimated_Total_Amount\nFunds_Obligated\nProgram_Name\nPI\nStart_Date\nEnd_Date\n\n\n\n\nNSF\nRegents of the University of Idaho\n628415.00\n628415\nCampus Cyberinfrastructure\nDaniel R Ewart\n2024-04-01\n2026-03-31\n\n\nNSF\nRegents of the University of Idaho\n456051.00\n302462\nUNDERGRADUATE PROGRAMS IN CHEM\nKristopher V Waynant\n2024-04-01\n2027-03-31\n\n\nNSF\nRegents of the University of Idaho\n1000000.00\n1000000\nNSF Engines - Type 1\nTara Hudiburg\n2024-03-01\n2025-08-31\n\n\nNSF\nRegents of the University of Idaho\n1179977.00\n546482\nDiscovery Research K-12\nJulie M Amador\n2023-12-01\n2027-11-30\n\n\n\n\n\nThe Combined Data\n\n\nCode\n#combining all the data sets together\ncombined_data &lt;- bind_rows(USDA_data_main, DOE_data_main, NIH_data_main, NSF_data_main)\n\n#show table\nknitr::kable(head(combined_data, 4))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAward_Date\nGrant_Title\nInstitution\nAward_Amount\nProgram_Name\nProgram_Area_Name\nSource\nPI\nStatus\nIs_New\nStart_Date\nEnd_Date\nMost_Recent_Award_Date\nAmount_Awarded_to_Date\nAmount_Awarded_this_FY\nFiscal_Year\nEstimated_Total_Amount\nFunds_Obligated\n\n\n\n\n2010-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n7495\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2009-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n6813\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2008-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n8524\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n2003-09-30\nN/A\nSAES - UNIVERSITY OF IDAHO\n1097\nN/A\nN/A\nUSDA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA"
  },
  {
    "objectID": "posts/assignment 9 _final/Final.html",
    "href": "posts/assignment 9 _final/Final.html",
    "title": "BCB 520 - Final Portfolio Post",
    "section": "",
    "text": "Questions for Movie Data:\n\nMost popular animated movies by county of origin\nHow much budget is given in the different studios\nShort movies: what are they like? budget? country\nWhich conutries have biggest industries?\nWith countries that work together who collaborates the most?\nRelease date vs length vs movie studio\nRelease date vs budget vs movie studio\nNumber of movies made per year line graph (possibly with large countries excluded)\nBudget differences between countries for given time segment\n\n\n\nCode\nAnimated_MOVIES &lt;- read.csv('Animation_Movies.csv')\n\n#convert dates to date objects\nAnimated_MOVIES$release_date &lt;- as.Date(Animated_MOVIES$release_date, format = \"%Y-%m-%d\")\n\n\n\n\nCode\n#Let's make a graph that looks at the number of movies made in each country and colors them by a number gradient. Also maybe make a popup on hover. I could add information about budget over some time period (last 15 years?).\n\nMOVIES_Q2_1 &lt;- Animated_MOVIES %&gt;%\n  filter(!(grepl(\",\", production_countries))) %&gt;%\n  group_by(production_countries) %&gt;%\n  summarise(NumMovies = n())\n\n\n\n\nCode\n#Pixar Budgets\n\n#Let's make a graph tracking the rise in budget for different companies over time. Hoe do I make multiple graphs layout nicely next to each other. Let's start with just one graph...\n\nMOVIES_Q1_1 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Pixar\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_1, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Pixar Movies\",\n       x = \"Movies\",\n       y = \"Budget (Millions)\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 0, hjust = 0),\n        plot.title = element_text(hjust = 0.1)) +\n  scale_fill_gradient(low = \"blue\", high = \"green\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Studio Ghibli Budgets\n\nMOVIES_Q1_2 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Studio Ghibli\", production_companies)) %&gt;%\n  filter(runtime &gt; 20) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_2, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Studio Ghibli Movies\",\n       x = \"Movies\",\n       y = \"Budget (Millions)\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))+\n  scale_fill_gradient(low = \"blue\", high = \"violet\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#DreamWorks Budgets\n\nMOVIES_Q1_3 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"DreamWorks\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_3, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"DreamWorks Movies\",\n       x = \"Movies\",\n       y = \"Budget\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))+\n  scale_fill_gradient(low = \"navy\", high = \"lightgreen\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Disney\n\nMOVIES_Q1_4 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Walt Disney P\", production_companies) & !(grepl(\"Pixar\", production_companies)) & !(grepl(\"Studio Ghibli\", production_companies))) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_4, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Disney Movies\",\n       x = \"Movies\",\n       y = \"Budget\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))+\n  scale_fill_gradient(low = \"navy\", high = \"pink\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Illumination Budgets\n\nMOVIES_Q1_5 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Illumination\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_5, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Illumination Movies\",\n       x = \"Movies\",\n       y = \"Budget\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))+\n  scale_fill_gradient(low = \"darkgreen\", high = \"gold\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Blue Sky Budgets\n\nMOVIES_Q1_6 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Blue Sky\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_6, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Blue Sky Movies\",\n       x = \"Movies\",\n       y = \"Budget\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1))+\n  scale_fill_gradient(low = \"purple\", high = \"yellow\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Sony Budgets\n\nMOVIES_Q1_7 &lt;- Animated_MOVIES %&gt;%\n  filter(grepl(\"Sony Pictures Animation\", production_companies)) %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0)\n\nggplot(MOVIES_Q1_7, aes(x = reorder(title, +release_date), y = budget/1e6, fill = budget/1e6)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Sony Movies\",\n       x = \"Movies\",\n       y = \"Budget\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1)) +\n  scale_fill_gradient(low = \"blue\", high = \"orange\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\nMovie Budgets and Revenue Over Time\n\n\nCode\n#comparing all budgets\n\nStudios &lt;- c('Disney', 'DreamWorks', \"Pixar\", \"Studio Ghibli\", \"Illumination\", \"Sony Animation\")\nStudio_Colors &lt;- c('Disney' = 'red', 'DreamWorks'= 'blue', \"Pixar\" = 'lightgreen', \"Studio Ghibli\" = 'violet', \"Illumination\" = 'gold', \"Sony Animation\" = 'brown' )\n\n#Grouping data by school and filtering by date and agency\nMOVIES_Q1_A &lt;- Animated_MOVIES %&gt;%\n  filter(runtime &gt; 40) %&gt;%\n  filter(runtime &lt; 140) %&gt;%\n  filter(budget &gt; 0) %&gt;%\n  #filter(release_date &gt; 1980) %&gt;%\n  mutate(company = case_when(\n      grepl(\"Studio Ghibli\", production_companies) ~ \"Studio Ghibli\",\n      grepl(\"Pixar\", production_companies) ~ \"Pixar\",\n      grepl(\"Walt Disney P\", production_companies) ~ \"Disney\",\n      grepl(\"DreamWorks\", production_companies) ~ \"DreamWorks\",\n      grepl(\"Illumination\", production_companies) ~ \"Illumination\",\n      grepl(\"Sony Pictures Animation\", production_companies) ~ \"Sony Animation\",\n      )\n    ) %&gt;%\n  filter(company %in% Studios)\n\n#Movie budgets\np1 &lt;- ggplot(MOVIES_Q1_A, aes(x = reorder(title, +release_date), y = budget/1e6, fill = company)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Budgets\",\n       x = \"Movies\",\n       y = \"Budget (Millions)\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  scale_fill_manual(values = Studio_Colors, name = \"Production Company\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"),\n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"),                          \n        plot.title = element_text(hjust = 0.1, size = 15)) +\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"none\")\n\n#Movie revenue\np2 &lt;- ggplot(MOVIES_Q1_A, aes(x = reorder(title, +release_date), y = revenue/1e9, fill = company)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Revenue\",\n       x = \"\",\n       y = \"Revenue (Billions)\",\n       fill = \"Production Company\") +\n  scale_fill_manual(values = Studio_Colors, name = \"Production Company\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        plot.title = element_text(hjust = 0.1, size = 15),\n        axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"),\n        axis.text.y = element_blank()) +\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"top\",\n        legend.box = \"horizontal\")\n\n#net revenue (revenue - budget)\np3 &lt;- ggplot(MOVIES_Q1_A, aes(x = reorder(title, +release_date), y = (revenue - budget)/1e9, fill = company)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Net Revenue\",\n       x = \"\",\n       y = \"Net Revenue (Billions)\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  scale_fill_manual(values = Studio_Colors, name = \"Production Company\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        plot.title = element_text(hjust = 0.1, size = 15),\n        axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"),\n        axis.text.y = element_blank())+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = 'none')\n\np1 | p2 | p3\n\n\n\n\n\n\n\nCode\nMOVIES_Q4_1 &lt;- Animated_MOVIES %&gt;%\n  filter(!(grepl(\",\", production_countries))) %&gt;%\n  group_by(production_countries) %&gt;%\n  summarise(NumMovies = n())\n\nggplot(MOVIES_Q4_1, aes(x = production_countries, y = NumMovies, fill = NumMovies)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  labs(title = \"Movies by country\",\n       x = \"Country\",\n       y = \"Number of Movies\",\n       fill = \"\") +\n  #geom_text(aes(label =  title), hjust = +1, color = \"lightyellow\") +\n  theme(panel.background = element_rect(fill = \"lightyellow\"), \n        panel.grid = element_blank(),\n        axis.text.x = element_text(angle = 90, hjust = 0),\n        plot.title = element_text(hjust = 0.1)) +\n  scale_fill_gradient(low = \"blue\", high = \"orange\")+\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5, size = 9, color = \"black\"), \n        axis.text.y = element_text(angle = 0, hjust = 1, size = 9, color = \"black\"))+\n  theme(legend.title = element_text(size = 12, color = \"black\"), \n        legend.text = element_text(size = 9, color = \"black\"),\n        legend.position = \"bottom\")\n\n\n\n\n\n\n\nCode\n#Let's look at a grpah of movies made per year\n\n#Grouping data by school and filtering by date and agency\n#MOVIES_G8 &lt;- Animated_MOVIES %&gt;%\n#  filter(runtime &gt; 40) %&gt;%\n#  filter(runtime &lt; 140) %&gt;%\n#  filter(budget &gt; 0) %&gt;%\n  #filter(release_date &gt; 1980) %&gt;%\n#  mutate(company = case_when(\n#      grepl(\"Walt Disney P\", Institution) ~ \"Disney\",\n#      grepl(\"DreamWorks\", Institution) ~ \"DreamWorks\",\n#      grepl(\"Pixar\", Institution) ~ \"Pixar\",\n#      grepl(\"Studio Ghibli\", Institution) ~ \"Studio Ghibli\",\n#      grepl(\"Illumination\", Institution) ~ \"Illumination\",\n#      grepl(\"Sony Pictures Animation\", Institution) ~ \"Sony Animation\",\n#      )\n#  ) %&gt;%\n#  group_by(company, ) %&gt;%\n#    summarise(awards_count = n())\n\n\n\n\nCode\n#\n\n#MOVIES_Q3_1 &lt;- Animated_MOVIES %&gt;%"
  }
]